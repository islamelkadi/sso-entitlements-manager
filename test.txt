============================= test session starts ==============================
platform linux -- Python 3.13.2, pytest-8.1.1, pluggy-1.5.0 -- /usr/local/bin/python3.13
cachedir: .pytest_cache
rootdir: /app
configfile: pyproject.toml
plugins: cov-5.0.0, xdist-3.6.1
collecting ... collected 180 items

tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log setup --------------------------------
2025-03-09 22:13:35 INFO Found credentials in environment variables.
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:35 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:35 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:35 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:35 INFO CONTINUING
2025-03-09 22:13:35 INFO Principal name: user1@testing.com, 98926d12-5a26-4c8d-8bda-725077a79513
2025-03-09 22:13:35 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:35 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:35 INFO CONTINUING
2025-03-09 22:13:35 INFO Principal name: user1@testing.com, 98926d12-5a26-4c8d-8bda-725077a79513
2025-03-09 22:13:35 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:35 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:35 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_1
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '5daaefbc-b13a-4448-b8bd-8e5a3daa0d6b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '5daaefbc-b13a-4448-b8bd-8e5a3daa0d6b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_3
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9cbb8608-9fb3-4c8a-88ce-3cca934693a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9cbb8608-9fb3-4c8a-88ce-3cca934693a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9cbb8608-9fb3-4c8a-88ce-3cca934693a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: group1, 049bb268-806b-4e50-9290-95ee36c2115c
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 9ec2018b-804d-45ee-95e0-55d2efa5a118
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 9ec2018b-804d-45ee-95e0-55d2efa5a118
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '42b7df92-90ca-4499-96de-ea5a62e50356', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uiwcfue4clwnmrgx'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '42b7df92-90ca-4499-96de-ea5a62e50356', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uiwcfue4clwnmrgx'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '42b7df92-90ca-4499-96de-ea5a62e50356', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uiwcfue4clwnmrgx'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c943fff8-5d28-4030-9285-e088cd7e28ea', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wbvvkruyce8nvwdh'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c943fff8-5d28-4030-9285-e088cd7e28ea', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wbvvkruyce8nvwdh'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'f54b3d5e-c4b3-4389-bcac-bf82e1c1bbd0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hmxrhqn1s3wy01c8'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '241fe51d-64b3-4c9f-9879-02558c985958', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hmxrhqn1s3wy01c8'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '241fe51d-64b3-4c9f-9879-02558c985958', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hmxrhqn1s3wy01c8'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a0fa3dc0-da16-45d5-84ff-5f64f498597a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-k4hy9v0drfd9s7um'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a0fa3dc0-da16-45d5-84ff-5f64f498597a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-k4hy9v0drfd9s7um'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a0fa3dc0-da16-45d5-84ff-5f64f498597a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-k4hy9v0drfd9s7um'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 409d63cc-de7c-4907-90cf-20ae9c874e0d
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 409d63cc-de7c-4907-90cf-20ae9c874e0d
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '46a1864b-cedd-4531-82e3-2b8977b41b20', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0shhfkpuwn3m9bpt'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '46a1864b-cedd-4531-82e3-2b8977b41b20', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0shhfkpuwn3m9bpt'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '46a1864b-cedd-4531-82e3-2b8977b41b20', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0shhfkpuwn3m9bpt'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '6a218a1e-10ec-453a-8e1d-edd92181a6a5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xldkxflmatnybio4'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'bed0b7fd-0f46-476b-aed1-29584c3ba9b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xldkxflmatnybio4'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'bed0b7fd-0f46-476b-aed1-29584c3ba9b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xldkxflmatnybio4'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 2ed10df0-236a-4265-9fc8-13889f1300fc
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 2ed10df0-236a-4265-9fc8-13889f1300fc
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3e29fccf-0bd8-44e9-bffb-2acc1e9a0f24', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qesmk7j4iskmkf0h'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3e29fccf-0bd8-44e9-bffb-2acc1e9a0f24', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qesmk7j4iskmkf0h'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3e29fccf-0bd8-44e9-bffb-2acc1e9a0f24', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qesmk7j4iskmkf0h'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 93a55c4b-71f6-4f92-8572-f11153576c71
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 93a55c4b-71f6-4f92-8572-f11153576c71
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_1
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '287e945d-7e8c-4f8d-8f6b-4c6a22d32cf8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '287e945d-7e8c-4f8d-8f6b-4c6a22d32cf8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_3
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '524fd857-b0c0-4011-91f0-738df4b48295', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '524fd857-b0c0-4011-91f0-738df4b48295', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '524fd857-b0c0-4011-91f0-738df4b48295', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: group1, c7dc90a4-4912-4be4-9600-675247d87550
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, dc8dddb6-e616-45fc-9451-d24ca0d96387
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, dc8dddb6-e616-45fc-9451-d24ca0d96387
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81ce2f39-4d98-4e7a-8191-a7c3f4a85265', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kpxubyzv8syit4iv'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81ce2f39-4d98-4e7a-8191-a7c3f4a85265', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kpxubyzv8syit4iv'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81ce2f39-4d98-4e7a-8191-a7c3f4a85265', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kpxubyzv8syit4iv'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c3533bd5-da49-4502-b29f-902276150388', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0dwhry9jkpyhol94'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c3533bd5-da49-4502-b29f-902276150388', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0dwhry9jkpyhol94'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'b22fd2c0-b7e1-4bc6-87e3-80f07879ff7c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-z4lvffgkrpopvvg7'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '78921b31-638d-4be6-92c8-c1356dfff337', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-z4lvffgkrpopvvg7'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '78921b31-638d-4be6-92c8-c1356dfff337', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-z4lvffgkrpopvvg7'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5f72118b-7249-4b1b-ac8c-c2ecf00105ea', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xhvphtgeq1kllbp3'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5f72118b-7249-4b1b-ac8c-c2ecf00105ea', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xhvphtgeq1kllbp3'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5f72118b-7249-4b1b-ac8c-c2ecf00105ea', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xhvphtgeq1kllbp3'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, a9547664-be00-4f16-a99e-7b9786fe27ad
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, a9547664-be00-4f16-a99e-7b9786fe27ad
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '40310ca6-56f2-4a4b-a77f-ef13a90ee2ef', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dmx25eonlcddt2il'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '40310ca6-56f2-4a4b-a77f-ef13a90ee2ef', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dmx25eonlcddt2il'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '40310ca6-56f2-4a4b-a77f-ef13a90ee2ef', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dmx25eonlcddt2il'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'ace37ff5-734d-4091-addd-5c2cfe629800', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-joiacp9gqk54sc5y'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c655b0fc-ceee-43a9-8681-043f838bacf5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-joiacp9gqk54sc5y'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c655b0fc-ceee-43a9-8681-043f838bacf5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-joiacp9gqk54sc5y'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 5b7a1867-9cda-45e0-b464-22694e95369a
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 5b7a1867-9cda-45e0-b464-22694e95369a
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '82f50019-36cf-419e-82c6-66fb02bdcb0a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ur49j9uxry310l48'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '82f50019-36cf-419e-82c6-66fb02bdcb0a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ur49j9uxry310l48'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '82f50019-36cf-419e-82c6-66fb02bdcb0a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ur49j9uxry310l48'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, ee96b1ef-3619-4f65-84a7-695d3b157a77
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, ee96b1ef-3619-4f65-84a7-695d3b157a77
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_1
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '9480c983-3213-4c8d-87c2-08d85875b271', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '9480c983-3213-4c8d-87c2-08d85875b271', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_3
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'b96869e0-7567-4cc1-bd23-fa0cb55f55fa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'b96869e0-7567-4cc1-bd23-fa0cb55f55fa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'b96869e0-7567-4cc1-bd23-fa0cb55f55fa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: group1, d00fdbfc-67d9-42a1-8258-abf0e6dd7172
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, ac599f03-0558-4082-b709-162aed6d5d76
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, ac599f03-0558-4082-b709-162aed6d5d76
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '17f62f04-7b98-4927-b18e-871ca322d7a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bk5ji8tjj646ldiq'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '17f62f04-7b98-4927-b18e-871ca322d7a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bk5ji8tjj646ldiq'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '17f62f04-7b98-4927-b18e-871ca322d7a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bk5ji8tjj646ldiq'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'fc302348-b631-4f69-8fd7-b8ffa1d0a32d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y1g1xcqrqwl4blgy'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'fc302348-b631-4f69-8fd7-b8ffa1d0a32d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y1g1xcqrqwl4blgy'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '6190dcf4-8e1e-4222-97d3-a97c05e791c3', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-reljl8jc7bzgew7e'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1e79f88d-a9c4-492a-b8c6-2e02a4c3e9e4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-reljl8jc7bzgew7e'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1e79f88d-a9c4-492a-b8c6-2e02a4c3e9e4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-reljl8jc7bzgew7e'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f3dc541c-83f5-4c12-a996-57ad9811a5da', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-nhxcczwjwbwls96k'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f3dc541c-83f5-4c12-a996-57ad9811a5da', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-nhxcczwjwbwls96k'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f3dc541c-83f5-4c12-a996-57ad9811a5da', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-nhxcczwjwbwls96k'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 2c12e9f4-6d1c-4139-9772-28b0aae2a7da
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 2c12e9f4-6d1c-4139-9772-28b0aae2a7da
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1b8298db-c80f-4327-a781-fae73f241e06', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-els3z7kmz0gmhfoe'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1b8298db-c80f-4327-a781-fae73f241e06', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-els3z7kmz0gmhfoe'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1b8298db-c80f-4327-a781-fae73f241e06', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-els3z7kmz0gmhfoe'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '74a58e80-c457-4807-b5c3-ba4b26c6cceb', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9xemtgz1qnpbh5la'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '070dcc2d-4b00-45e5-822b-855fd0e26662', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9xemtgz1qnpbh5la'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '070dcc2d-4b00-45e5-822b-855fd0e26662', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9xemtgz1qnpbh5la'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 8f2909fd-fac5-44a8-be52-679baddd7f86
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 8f2909fd-fac5-44a8-be52-679baddd7f86
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4d74aef1-33d7-4ea6-8f69-0b2c4a0a0dca', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fzofpulenwljxapc'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4d74aef1-33d7-4ea6-8f69-0b2c4a0a0dca', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fzofpulenwljxapc'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4d74aef1-33d7-4ea6-8f69-0b2c4a0a0dca', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fzofpulenwljxapc'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 57e4cf1b-47e2-4ad1-9350-13cebf94869d
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 57e4cf1b-47e2-4ad1-9350-13cebf94869d
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_1
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '1a474caf-7394-4530-98ab-bf6c7c6b4be9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '1a474caf-7394-4530-98ab-bf6c7c6b4be9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_3
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '3d80a2bd-ea41-4142-8bdf-e0ea55aa9079', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '3d80a2bd-ea41-4142-8bdf-e0ea55aa9079', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '3d80a2bd-ea41-4142-8bdf-e0ea55aa9079', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: group1, cc2e91a7-29c4-4782-8426-74c890b8e223
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, cf5036cc-f5ce-4d27-ac47-06304a1df99c
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, cf5036cc-f5ce-4d27-ac47-06304a1df99c
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c9001348-5864-4eab-a13d-815547c5ca91', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pqnnncyurqhqnoob'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c9001348-5864-4eab-a13d-815547c5ca91', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pqnnncyurqhqnoob'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c9001348-5864-4eab-a13d-815547c5ca91', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pqnnncyurqhqnoob'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '07fb0c25-2554-49c0-ab02-6c190c822d87', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ptltanr7rqaex29k'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '07fb0c25-2554-49c0-ab02-6c190c822d87', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ptltanr7rqaex29k'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '4b635b9f-ba8b-4301-ae14-e07ab1733637', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-exikzrhyzc7shtov'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '48b3e2bc-25a4-4cf0-a836-741aeec3c1d9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-exikzrhyzc7shtov'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '48b3e2bc-25a4-4cf0-a836-741aeec3c1d9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-exikzrhyzc7shtov'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '546bc673-3028-49d1-8538-40a81a72f278', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-yjh8lkh1gkdhegnm'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '546bc673-3028-49d1-8538-40a81a72f278', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-yjh8lkh1gkdhegnm'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '546bc673-3028-49d1-8538-40a81a72f278', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-yjh8lkh1gkdhegnm'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, e6e4a658-b3db-4895-b920-c21b1c289d88
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, e6e4a658-b3db-4895-b920-c21b1c289d88
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'fba67946-3e89-4af8-948c-49da4cfcc768', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gwmvjllzoz0arpnv'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'fba67946-3e89-4af8-948c-49da4cfcc768', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gwmvjllzoz0arpnv'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'fba67946-3e89-4af8-948c-49da4cfcc768', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gwmvjllzoz0arpnv'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'd0614913-9c17-4d91-b7f5-13c7dd330844', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mvcslcfz6fu2pipy'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'da8f2267-ba0f-4056-b105-3f4bfa5d9288', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mvcslcfz6fu2pipy'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'da8f2267-ba0f-4056-b105-3f4bfa5d9288', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mvcslcfz6fu2pipy'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, faba440e-33ef-44e2-85ba-b11fa76cf928
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, faba440e-33ef-44e2-85ba-b11fa76cf928
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a529efdd-e59b-4465-b7e0-ebfac4c59893', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-deri21etglrciftu'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a529efdd-e59b-4465-b7e0-ebfac4c59893', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-deri21etglrciftu'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a529efdd-e59b-4465-b7e0-ebfac4c59893', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-deri21etglrciftu'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 1a04cb2c-7e30-48d7-bc8e-d3451841e598
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 1a04cb2c-7e30-48d7-bc8e-d3451841e598
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_1
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'ae40f099-1cd5-4a07-a3ce-4246a29d46e6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'ae40f099-1cd5-4a07-a3ce-4246a29d46e6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_3
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f207350-c7ea-4267-bf8d-dc398c90673b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f207350-c7ea-4267-bf8d-dc398c90673b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f207350-c7ea-4267-bf8d-dc398c90673b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: group1, 6902d083-e67c-44ec-81b5-3de3176cfa6a
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 0650bc5c-67cf-4946-8436-ebb545f9614f
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 0650bc5c-67cf-4946-8436-ebb545f9614f
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '88f1115a-39f4-4982-9973-37b049d1bf74', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-r1oj00tszpkjelii'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '88f1115a-39f4-4982-9973-37b049d1bf74', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-r1oj00tszpkjelii'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '88f1115a-39f4-4982-9973-37b049d1bf74', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-r1oj00tszpkjelii'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '669a7ee2-2323-45d0-8fc1-f21fbf611fe9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bqoadxazfe4navm5'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '669a7ee2-2323-45d0-8fc1-f21fbf611fe9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bqoadxazfe4navm5'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '88428231-387f-403f-b38f-7584777f2b2f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hyv3nncy2h2lbzf6'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'a84c41d1-3c30-4cca-9a74-3d8ce369d78d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hyv3nncy2h2lbzf6'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'a84c41d1-3c30-4cca-9a74-3d8ce369d78d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hyv3nncy2h2lbzf6'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '789e4c00-14d5-4161-ac53-2b5bcb8d31a8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mx60gqdxcxfanxu0'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '789e4c00-14d5-4161-ac53-2b5bcb8d31a8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mx60gqdxcxfanxu0'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '789e4c00-14d5-4161-ac53-2b5bcb8d31a8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mx60gqdxcxfanxu0'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 50f1eba0-db95-4cea-9b04-d25fa2a28f5e
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 50f1eba0-db95-4cea-9b04-d25fa2a28f5e
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '75b6fb4a-132a-4e5c-8476-7859d4532f61', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-iuwu8lzw4geh4iiu'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '75b6fb4a-132a-4e5c-8476-7859d4532f61', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-iuwu8lzw4geh4iiu'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '75b6fb4a-132a-4e5c-8476-7859d4532f61', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-iuwu8lzw4geh4iiu'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'aefc409e-0c55-4143-8283-ff98fff9fd50', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-zko4wsepoimhxyel'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '148f847b-9a03-44e0-ac44-47206135c61e', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-zko4wsepoimhxyel'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '148f847b-9a03-44e0-ac44-47206135c61e', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-zko4wsepoimhxyel'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 3d6563ee-821b-492f-8aaf-5988a367f5d4
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 3d6563ee-821b-492f-8aaf-5988a367f5d4
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c58f3551-30be-4e6a-ba8f-7cd82de5c8c3', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wyibkeq0lba2kans'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c58f3551-30be-4e6a-ba8f-7cd82de5c8c3', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wyibkeq0lba2kans'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c58f3551-30be-4e6a-ba8f-7cd82de5c8c3', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wyibkeq0lba2kans'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 3e9c33f1-10fb-4534-a046-835b894c3f75
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 3e9c33f1-10fb-4534-a046-835b894c3f75
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_1
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '303a05d0-3f07-4de6-9b27-59d8f220479b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '303a05d0-3f07-4de6-9b27-59d8f220479b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_3
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f606be5-0480-4792-af1f-d91380f0b004', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f606be5-0480-4792-af1f-d91380f0b004', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f606be5-0480-4792-af1f-d91380f0b004', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: group1, 56a19a9e-a0bf-4501-85cf-3ace36f128e6
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 416dee4e-111d-4a2d-919d-22950315fe12
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 416dee4e-111d-4a2d-919d-22950315fe12
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '62fa15e4-7f51-4861-afb0-95b576c3d006', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9bgdji8ffpg9qka1'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '62fa15e4-7f51-4861-afb0-95b576c3d006', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9bgdji8ffpg9qka1'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '62fa15e4-7f51-4861-afb0-95b576c3d006', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9bgdji8ffpg9qka1'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'f45fe01b-132a-40d0-be82-7ffe145cade5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bmguv09q8zjl5vcd'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'f45fe01b-132a-40d0-be82-7ffe145cade5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bmguv09q8zjl5vcd'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'a2836e1e-a9e8-40fd-af87-34a6e33741a9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-chd7o8d2vutx8v6q'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '55250b83-9e6d-4b09-a1fc-ebd3dd18c5a2', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-chd7o8d2vutx8v6q'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '55250b83-9e6d-4b09-a1fc-ebd3dd18c5a2', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-chd7o8d2vutx8v6q'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e4c64ba-bee4-4cb1-8ed0-0634005c9990', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mropchfamvcomlju'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e4c64ba-bee4-4cb1-8ed0-0634005c9990', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mropchfamvcomlju'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e4c64ba-bee4-4cb1-8ed0-0634005c9990', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mropchfamvcomlju'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, ed196628-a3cf-4ca7-9565-6cfa8c2fc081
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, ed196628-a3cf-4ca7-9565-6cfa8c2fc081
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e14bed01-fc0c-43df-b852-c7a2609d3744', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4x6t0gc30fltgnna'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e14bed01-fc0c-43df-b852-c7a2609d3744', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4x6t0gc30fltgnna'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e14bed01-fc0c-43df-b852-c7a2609d3744', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4x6t0gc30fltgnna'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '3b35af06-e4e6-4a90-b479-e292b568504f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-e1s3rnp9yk2ktfqq'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'e7419b67-7d46-4b17-9f54-f6068c0d262c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-e1s3rnp9yk2ktfqq'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'e7419b67-7d46-4b17-9f54-f6068c0d262c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-e1s3rnp9yk2ktfqq'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 8819a202-d1a0-4f8c-b54a-5760558cedd3
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 8819a202-d1a0-4f8c-b54a-5760558cedd3
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7ffed82c-e6f2-464d-9f33-83e605d4f1b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dv4sflazzqwhzuln'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7ffed82c-e6f2-464d-9f33-83e605d4f1b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dv4sflazzqwhzuln'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7ffed82c-e6f2-464d-9f33-83e605d4f1b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dv4sflazzqwhzuln'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, d6afa24e-ee1b-470a-be0f-43fc1dfae592
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, d6afa24e-ee1b-470a-be0f-43fc1dfae592
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_1
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'aa21b96a-9fd6-40b0-a84a-ab1c6077deaa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'aa21b96a-9fd6-40b0-a84a-ab1c6077deaa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_3
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '15608f3a-9129-4244-b145-327e1b0f4008', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '15608f3a-9129-4244-b145-327e1b0f4008', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '15608f3a-9129-4244-b145-327e1b0f4008', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: group1, 21b9e99c-ddb1-4a73-a3af-57545ebe0d15
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 534c0a25-68b8-4cbb-8225-cfa3a52746a1
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 534c0a25-68b8-4cbb-8225-cfa3a52746a1
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1f42a35c-4f8f-470b-8761-47767f39d546', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ubfhhnigdmp1l0em'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1f42a35c-4f8f-470b-8761-47767f39d546', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ubfhhnigdmp1l0em'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1f42a35c-4f8f-470b-8761-47767f39d546', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ubfhhnigdmp1l0em'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '51741658-9a91-449d-ada1-37097fdb9840', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-sznl8ryrgeiedgb0'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '51741658-9a91-449d-ada1-37097fdb9840', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-sznl8ryrgeiedgb0'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '68b24782-da22-4c52-b80a-b989d173f7dd', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jq4r7zftjzmfvftk'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '7533b627-f99b-43c3-a213-09da7a1b9189', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jq4r7zftjzmfvftk'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '7533b627-f99b-43c3-a213-09da7a1b9189', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jq4r7zftjzmfvftk'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '37429422-5791-40ec-b612-bb63d6af7926', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gkaorw85oins2mni'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '37429422-5791-40ec-b612-bb63d6af7926', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gkaorw85oins2mni'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '37429422-5791-40ec-b612-bb63d6af7926', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gkaorw85oins2mni'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 866a309c-e567-4533-941b-4af8fe5f037d
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 866a309c-e567-4533-941b-4af8fe5f037d
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '43d4aea4-29e1-4e36-9428-a09886d0bdf5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kbqrw1q9rzhebuqv'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '43d4aea4-29e1-4e36-9428-a09886d0bdf5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kbqrw1q9rzhebuqv'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '43d4aea4-29e1-4e36-9428-a09886d0bdf5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kbqrw1q9rzhebuqv'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'f4ee439a-56a5-4a32-9994-d628b1656f15', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-39tft22yhhlnhwbo'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1a9697fb-5bb6-438b-a255-7a73fe8da2a9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-39tft22yhhlnhwbo'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1a9697fb-5bb6-438b-a255-7a73fe8da2a9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-39tft22yhhlnhwbo'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 50b661bc-7439-4239-8fef-5b5f4a7d69c4
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 50b661bc-7439-4239-8fef-5b5f4a7d69c4
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c18cdd85-8949-4b32-8f20-1c56ae94bd63', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-cbw7y64nmisno0jt'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c18cdd85-8949-4b32-8f20-1c56ae94bd63', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-cbw7y64nmisno0jt'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c18cdd85-8949-4b32-8f20-1c56ae94bd63', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-cbw7y64nmisno0jt'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 005ea2fd-fb8d-492e-8beb-033eaf907a0f
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 005ea2fd-fb8d-492e-8beb-033eaf907a0f
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_1
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '845ec271-cae8-4974-a90e-61986c7b4599', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '845ec271-cae8-4974-a90e-61986c7b4599', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_3
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '7ee0d017-589d-439a-b007-bb74b2a7c3e4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '7ee0d017-589d-439a-b007-bb74b2a7c3e4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '7ee0d017-589d-439a-b007-bb74b2a7c3e4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: group1, 91178ba2-4232-4e9f-8389-8adb425ad660
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 34f84707-3d91-4cc3-abf0-f406c08dbbe5
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 34f84707-3d91-4cc3-abf0-f406c08dbbe5
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f349d1dc-dd41-4aea-b9ae-e600fdd12fb5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-lros91uqbyzrmrec'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f349d1dc-dd41-4aea-b9ae-e600fdd12fb5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-lros91uqbyzrmrec'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f349d1dc-dd41-4aea-b9ae-e600fdd12fb5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-lros91uqbyzrmrec'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '67869b12-8e7e-433d-930c-43b288a0b8b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ck3be6qxgzguk0ud'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '67869b12-8e7e-433d-930c-43b288a0b8b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ck3be6qxgzguk0ud'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '439cf950-637f-4cbf-81c3-a02c0ad1700a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uhraztdxujflkjxd'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '697dee4a-51bb-407e-9955-64a2fbb26cbe', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uhraztdxujflkjxd'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '697dee4a-51bb-407e-9955-64a2fbb26cbe', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uhraztdxujflkjxd'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e95c21f-e960-4b7a-ac19-06b3fe118c7f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-q142njwwopzl33q0'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e95c21f-e960-4b7a-ac19-06b3fe118c7f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-q142njwwopzl33q0'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e95c21f-e960-4b7a-ac19-06b3fe118c7f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-q142njwwopzl33q0'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 2bf6df84-b9ca-4910-be55-bfe92c62d5b6
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 2bf6df84-b9ca-4910-be55-bfe92c62d5b6
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'cc507cb4-54cf-4222-bfe8-faa1e9cdede8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-46wugnw2ype2jumq'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'cc507cb4-54cf-4222-bfe8-faa1e9cdede8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-46wugnw2ype2jumq'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'cc507cb4-54cf-4222-bfe8-faa1e9cdede8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-46wugnw2ype2jumq'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '5125b8ac-c119-4973-94de-438aaff9d863', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-u9kywc9siwyp5ow1'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'fc484dad-830d-42d7-a57a-c30080782836', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-u9kywc9siwyp5ow1'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'fc484dad-830d-42d7-a57a-c30080782836', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-u9kywc9siwyp5ow1'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, ae9e096b-eb44-4e44-b15f-0b83b2c68c38
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, ae9e096b-eb44-4e44-b15f-0b83b2c68c38
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4aec6376-ca8e-44bc-b382-8a144427c440', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-eqq7skjgcsuldt8g'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4aec6376-ca8e-44bc-b382-8a144427c440', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-eqq7skjgcsuldt8g'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4aec6376-ca8e-44bc-b382-8a144427c440', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-eqq7skjgcsuldt8g'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 63cbfa96-f07c-4846-88c7-c216317afa48
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 63cbfa96-f07c-4846-88c7-c216317afa48
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_1
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '23fe40b7-05d0-4e5d-93cc-c5fd56547a3a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '23fe40b7-05d0-4e5d-93cc-c5fd56547a3a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_3
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'ce0876b2-d8ac-4d5e-baec-bfdb0f2bae3d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'ce0876b2-d8ac-4d5e-baec-bfdb0f2bae3d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'ce0876b2-d8ac-4d5e-baec-bfdb0f2bae3d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: group1, 73d90beb-4ca0-4631-bdb9-7abdce645b2b
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 92093a5e-f9cd-4077-91fd-c093638dbe83
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 92093a5e-f9cd-4077-91fd-c093638dbe83
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3c32cc9a-6118-418f-b53f-9ab7c4abfd1e', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fvv1aumeqikibenr'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3c32cc9a-6118-418f-b53f-9ab7c4abfd1e', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fvv1aumeqikibenr'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3c32cc9a-6118-418f-b53f-9ab7c4abfd1e', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fvv1aumeqikibenr'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'a1a30bae-fa8b-4460-a3a3-089a86c5a272', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-tkcwidih7la84gpn'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'a1a30bae-fa8b-4460-a3a3-089a86c5a272', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-tkcwidih7la84gpn'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'e7d85113-c11d-4676-8326-6debb6eb4275', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wvahnx7qe4dp2izb'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '959c51b8-5112-4df3-969f-becca992f5fd', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wvahnx7qe4dp2izb'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '959c51b8-5112-4df3-969f-becca992f5fd', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wvahnx7qe4dp2izb'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '67ad2b01-a4de-4978-9056-5eac9bbdc508', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dthtygzsyy5cx6ad'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '67ad2b01-a4de-4978-9056-5eac9bbdc508', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dthtygzsyy5cx6ad'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '67ad2b01-a4de-4978-9056-5eac9bbdc508', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dthtygzsyy5cx6ad'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 33d964c9-ecfd-42f4-acf0-9b5e0bbbb9f0
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 33d964c9-ecfd-42f4-acf0-9b5e0bbbb9f0
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e77f0bff-55cc-44b7-9432-cd5b9b9ff33c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-d64xh4jeszfos7rj'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e77f0bff-55cc-44b7-9432-cd5b9b9ff33c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-d64xh4jeszfos7rj'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e77f0bff-55cc-44b7-9432-cd5b9b9ff33c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-d64xh4jeszfos7rj'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'ad42e37e-3719-46c9-b826-9647c5bd9af3', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gzufr0rtqa6d1lay'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '5137248b-bfcc-4311-af59-d1e98e8a9d17', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gzufr0rtqa6d1lay'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '5137248b-bfcc-4311-af59-d1e98e8a9d17', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gzufr0rtqa6d1lay'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 21db875f-1dc4-469f-bb2f-615560a156e6
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 21db875f-1dc4-469f-bb2f-615560a156e6
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '2e8225fd-98c4-4120-9466-3352bc3a79d0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-8qq4nhvvqwra1ezy'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '2e8225fd-98c4-4120-9466-3352bc3a79d0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-8qq4nhvvqwra1ezy'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '2e8225fd-98c4-4120-9466-3352bc3a79d0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-8qq4nhvvqwra1ezy'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, d0dbbb22-09a8-4a04-9b1a-da9a57168ec2
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, d0dbbb22-09a8-4a04-9b1a-da9a57168ec2
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_1
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'c510a8cf-c125-4dd4-9455-e973ec551bcf', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'c510a8cf-c125-4dd4-9455-e973ec551bcf', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_3
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '0b3e0db5-ea23-4eed-a12e-94a768a426ff', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '0b3e0db5-ea23-4eed-a12e-94a768a426ff', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '0b3e0db5-ea23-4eed-a12e-94a768a426ff', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: group1, 1bd0fbd4-eb9e-44c7-983a-4b12c8c3b627
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 5522fbc3-ba47-45ce-8a26-418626a35478
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 5522fbc3-ba47-45ce-8a26-418626a35478
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '070bcfd9-0bef-4203-9bc6-133d955f2b54', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fehixdrrzhtzwvre'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '070bcfd9-0bef-4203-9bc6-133d955f2b54', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fehixdrrzhtzwvre'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '070bcfd9-0bef-4203-9bc6-133d955f2b54', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fehixdrrzhtzwvre'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '2256f413-54d8-4249-9d1a-4784d49ab62d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-supi0ven5duenpjp'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '2256f413-54d8-4249-9d1a-4784d49ab62d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-supi0ven5duenpjp'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '7a0704da-b266-4476-aa36-370a01a5c2fb', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uoygm0yw6nwy4i1g'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '4b56f45d-39c1-4b90-88eb-581e9cf9fcc4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uoygm0yw6nwy4i1g'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '4b56f45d-39c1-4b90-88eb-581e9cf9fcc4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uoygm0yw6nwy4i1g'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a97b30a9-df86-453f-8e9e-dca044ee3839', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y99bn17tzrrkacsu'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a97b30a9-df86-453f-8e9e-dca044ee3839', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y99bn17tzrrkacsu'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a97b30a9-df86-453f-8e9e-dca044ee3839', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y99bn17tzrrkacsu'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, dab33c9e-8e0b-4215-9b20-ec38a155e40b
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, dab33c9e-8e0b-4215-9b20-ec38a155e40b
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81a6e584-76b9-40fc-8e2a-1dd440ca8d04', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-3oi8yuylqsphtpjd'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81a6e584-76b9-40fc-8e2a-1dd440ca8d04', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-3oi8yuylqsphtpjd'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81a6e584-76b9-40fc-8e2a-1dd440ca8d04', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-3oi8yuylqsphtpjd'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '2ad6ac2d-0d20-4846-b261-248407904379', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4pggzkstru2obsbe'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '4449d5d4-0e9c-4de3-b10d-7f2eff80639f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4pggzkstru2obsbe'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '4449d5d4-0e9c-4de3-b10d-7f2eff80639f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4pggzkstru2obsbe'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 0ddfe7f4-4715-44f6-94d8-be4d1c81d89a
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 0ddfe7f4-4715-44f6-94d8-be4d1c81d89a
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7d564904-0fcb-48ea-9e2e-c74cf03a542c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mldcicdkxl204rtv'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7d564904-0fcb-48ea-9e2e-c74cf03a542c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mldcicdkxl204rtv'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7d564904-0fcb-48ea-9e2e-c74cf03a542c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mldcicdkxl204rtv'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
FAILED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, b1b9eef5-64a8-4ead-b7d5-f19ad5390d1f
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, b1b9eef5-64a8-4ead-b7d5-f19ad5390d1f
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_1
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '964bdc22-71f4-4f67-aaa6-a11c72995e3a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-irz72o0kco4jzwkw'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_2
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '964bdc22-71f4-4f67-aaa6-a11c72995e3a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-irz72o0kco4jzwkw'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_3
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '25db9bce-0eaf-4b00-9d3e-1a89d0a31b60', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-irz72o0kco4jzwkw'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_4
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '25db9bce-0eaf-4b00-9d3e-1a89d0a31b60', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-irz72o0kco4jzwkw'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_5
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '25db9bce-0eaf-4b00-9d3e-1a89d0a31b60', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-irz72o0kco4jzwkw'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: group1, 125d4ecd-a557-4a55-a91a-7aedb8d83920
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, 7ac69e2a-9d4f-4cb8-8d35-c9c860046514
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, 7ac69e2a-9d4f-4cb8-8d35-c9c860046514
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_1
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '8920e9fd-4561-4ca1-9c08-1a75792f24c0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-rjrpcjqrjcgab9kq'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_2
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '8920e9fd-4561-4ca1-9c08-1a75792f24c0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-rjrpcjqrjcgab9kq'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_3
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '8920e9fd-4561-4ca1-9c08-1a75792f24c0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-rjrpcjqrjcgab9kq'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_4
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'ddd9cba4-39e4-4a59-8f94-31bb0c671927', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1dbghmq4tue2krzk'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_5
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'ddd9cba4-39e4-4a59-8f94-31bb0c671927', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1dbghmq4tue2krzk'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_2
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'eb994db6-db49-4a8f-96f8-721b88ba1503', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pnmwcdkgi2lhawhc'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_4
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'd07dffd4-3d61-4b29-873f-5b5108bf674b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pnmwcdkgi2lhawhc'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_5
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'd07dffd4-3d61-4b29-873f-5b5108bf674b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pnmwcdkgi2lhawhc'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_1
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f78edbe9-494d-4a9d-b942-4ae6b3f634c6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0ilswduvuw5oqfa6'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_2
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f78edbe9-494d-4a9d-b942-4ae6b3f634c6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0ilswduvuw5oqfa6'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_3
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f78edbe9-494d-4a9d-b942-4ae6b3f634c6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0ilswduvuw5oqfa6'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, d4f0a57d-9244-4707-865d-3c64837694be
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, d4f0a57d-9244-4707-865d-3c64837694be
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_1
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3998e5d0-902d-42e9-be8f-5ef4a2de33bd', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-564e16toneqj2iti'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_2
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3998e5d0-902d-42e9-be8f-5ef4a2de33bd', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-564e16toneqj2iti'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_3
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3998e5d0-902d-42e9-be8f-5ef4a2de33bd', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-564e16toneqj2iti'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_2
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '32a25dd2-906b-4429-bbb0-9935d40db08f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ygsjboi5j1denncy'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_4
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1299644c-d28c-44b8-ace7-3954c7524ae9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ygsjboi5j1denncy'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_5
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1299644c-d28c-44b8-ace7-3954c7524ae9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ygsjboi5j1denncy'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, 39b77c5a-6564-4f1c-bd81-05f489b6363a
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, 39b77c5a-6564-4f1c-bd81-05f489b6363a
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_1
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'fec21b72-3533-4efe-927f-8ccc5f438021', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hcuvthakmdr5r5lf'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_2
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'fec21b72-3533-4efe-927f-8ccc5f438021', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hcuvthakmdr5r5lf'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_3
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'fec21b72-3533-4efe-927f-8ccc5f438021', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hcuvthakmdr5r5lf'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, bc808aa6-8bad-43af-ba0e-dce62f9452aa
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, bc808aa6-8bad-43af-ba0e-dce62f9452aa
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_1
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'd8d120d8-6173-4a9b-9a9a-405528f6b040', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-n32jreipd6mkfxyh'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_2
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'd8d120d8-6173-4a9b-9a9a-405528f6b040', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-n32jreipd6mkfxyh'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_3
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '44675d83-ab56-4edb-8c0f-921f227ecd87', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-n32jreipd6mkfxyh'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_4
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '44675d83-ab56-4edb-8c0f-921f227ecd87', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-n32jreipd6mkfxyh'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_5
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '44675d83-ab56-4edb-8c0f-921f227ecd87', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-n32jreipd6mkfxyh'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'invalid_permission_set_1', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: group1, 8c25b675-0f41-4405-8641-6297f139e97b
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_1, None
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, 2b392ada-6ac9-416c-9088-44bb3d0d0448
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, 2b392ada-6ac9-416c-9088-44bb3d0d0448
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_1
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '65c55a0c-afca-45bf-8e19-cc7de69136b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-6moshweuxd1x6ez9'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_2
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '65c55a0c-afca-45bf-8e19-cc7de69136b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-6moshweuxd1x6ez9'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_3
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '65c55a0c-afca-45bf-8e19-cc7de69136b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-6moshweuxd1x6ez9'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_4
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '4fc9acb7-284a-48b3-b534-fe8b0cb71aa6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gjseh4xfbpofyh0c'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_5
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '4fc9acb7-284a-48b3-b534-fe8b0cb71aa6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gjseh4xfbpofyh0c'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_2
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '93723bfc-d8ba-40e5-8ff6-b3344b98c67b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hucrminvl1v660rh'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_4
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'b2f0581c-e664-4dc1-a2e2-8255233e641a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hucrminvl1v660rh'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_5
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'b2f0581c-e664-4dc1-a2e2-8255233e641a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hucrminvl1v660rh'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_1
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7306a089-2f17-4a6b-b453-27b3a724d6aa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qdbyvabmuycoobqw'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_2
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7306a089-2f17-4a6b-b453-27b3a724d6aa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qdbyvabmuycoobqw'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_3
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7306a089-2f17-4a6b-b453-27b3a724d6aa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qdbyvabmuycoobqw'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, 820efa3b-a10a-4276-92b3-323606e93bcb
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, 820efa3b-a10a-4276-92b3-323606e93bcb
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_1
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'b0bdc3e3-becd-48ef-b27a-1bbb0ead21c9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pszkbb09zfta4md6'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_2
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'b0bdc3e3-becd-48ef-b27a-1bbb0ead21c9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pszkbb09zfta4md6'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_account_3
2025-03-09 22:13:41 ERROR Target type: ACCOUNT
2025-03-09 22:13:41 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'b0bdc3e3-becd-48ef-b27a-1bbb0ead21c9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pszkbb09zfta4md6'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_2
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '1a1ca8bf-30f5-4ddb-ae27-b70792899f34', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0zhq4qtnca03uoue'}
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_4
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1e03c0f5-b7c5-4c40-990f-818212fb5a27', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0zhq4qtnca03uoue'}
2025-03-09 22:13:41 ERROR NOT VALID TARGET
2025-03-09 22:13:41 ERROR Target name: invalid_ou_5
2025-03-09 22:13:41 ERROR Target type: OU
2025-03-09 22:13:41 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1e03c0f5-b7c5-4c40-990f-818212fb5a27', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0zhq4qtnca03uoue'}
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:41 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:41 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, 50e4f603-5052-4bb6-9ad8-69beb1e6d988
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:41 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:41 INFO CONTINUING
2025-03-09 22:13:41 INFO Principal name: user1@testing.com, 50e4f603-5052-4bb6-9ad8-69beb1e6d988
2025-03-09 22:13:41 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:41 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:41 INFO Generate invalid AWS account SSO assignments
PASSED
tests/unit/test_access_control_resolver.py::test_create_account_assignments[1.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] 
-------------------------------- live log call ---------------------------------
2025-03-09 22:13:42 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:42 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:42 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:42 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:42 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:42 ERROR NOT VALID TARGET
2025-03-09 22:13:42 ERROR Target name: invalid_account_1
2025-03-09 22:13:42 ERROR Target type: ACCOUNT
2025-03-09 22:13:42 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1c50fb94-7ea7-40de-aca4-46d0b219a45f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ykrinb2bk22k4k4x'}
2025-03-09 22:13:42 ERROR NOT VALID TARGET
2025-03-09 22:13:42 ERROR Target name: invalid_account_2
2025-03-09 22:13:42 ERROR Target type: ACCOUNT
2025-03-09 22:13:42 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1c50fb94-7ea7-40de-aca4-46d0b219a45f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ykrinb2bk22k4k4x'}
2025-03-09 22:13:42 ERROR NOT VALID TARGET
2025-03-09 22:13:42 ERROR Target name: invalid_account_3
2025-03-09 22:13:42 ERROR Target type: ACCOUNT
2025-03-09 22:13:42 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1c50fb94-7ea7-40de-aca4-46d0b219a45f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ykrinb2bk22k4k4x'}
2025-03-09 22:13:42 INFO Generate invalid AWS account SSO assignments
PASSED

=================================== FAILURES ===================================
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '960582229323', 'workload_1_prod': '781995886821', 'workload_1_test': '7280..., 'test': [{'Id': '728073224597', 'Name': 'workload_1_test'}, {'Id': '091287593226', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-fqwxktg5mw1xw3vq', 'PrincipalId': 'd223e3f4-1897-4461-9d96-741b08cb73e1', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log setup ------------------------------
2025-03-09 22:13:35 INFO Found credentials in environment variables.
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:35 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:35 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:35 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:35 INFO CONTINUING
2025-03-09 22:13:35 INFO Principal name: user1@testing.com, 98926d12-5a26-4c8d-8bda-725077a79513
2025-03-09 22:13:35 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:35 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:35 INFO CONTINUING
2025-03-09 22:13:35 INFO Principal name: user1@testing.com, 98926d12-5a26-4c8d-8bda-725077a79513
2025-03-09 22:13:35 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:35 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:35 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '851064357594', 'workload_1_prod': '958015841660', 'workload_1_test': '9273..., 'test': [{'Id': '927336302708', 'Name': 'workload_1_test'}, {'Id': '322152063262', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 10 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-pbn7mwidnwrb7zsv', 'PrincipalId': '6b8bc4e9-e1e1-4b18-9373-317f5d7a150d', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (80 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '358185600824', 'workload_1_prod': '062286303680', 'workload_1_suspended': ..., 'test': [{'Id': '643013098594', 'Name': 'workload_1_test'}, {'Id': '141601549227', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 10 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-pxh6eccycojaizov', 'PrincipalId': '762d39b9-685f-40c4-b2ae-9f529a21e9af', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (80 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '784040923052', 'workload_1_prod': '524924944461', 'workload_1_test': '9903..., 'test': [{'Id': '990354603471', 'Name': 'workload_1_test'}, {'Id': '392164723827', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg', 'PrincipalId': '9cbb8608-9fb3-4c8a-88ce-3cca934693a6', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_1
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '5daaefbc-b13a-4448-b8bd-8e5a3daa0d6b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '5daaefbc-b13a-4448-b8bd-8e5a3daa0d6b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_3
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9cbb8608-9fb3-4c8a-88ce-3cca934693a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9cbb8608-9fb3-4c8a-88ce-3cca934693a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9cbb8608-9fb3-4c8a-88ce-3cca934693a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fpdrjnjkd0pgw9qg'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '091813810430', 'workload_1_prod': '251361300613', 'workload_1_test': '0146..., 'test': [{'Id': '014688391590', 'Name': 'workload_1_test'}, {'Id': '654572277645', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 10 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-uiwcfue4clwnmrgx', 'PrincipalId': 'fe29e0d4-175f-402e-98c6-f5d60283b8f7', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (80 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '42b7df92-90ca-4499-96de-ea5a62e50356', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uiwcfue4clwnmrgx'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '42b7df92-90ca-4499-96de-ea5a62e50356', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uiwcfue4clwnmrgx'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '42b7df92-90ca-4499-96de-ea5a62e50356', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uiwcfue4clwnmrgx'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '133907740622', 'workload_1_prod': '905596547779', 'workload_1_test': '0887..., 'test': [{'Id': '088758774853', 'Name': 'workload_1_test'}, {'Id': '689077139845', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-wbvvkruyce8nvwdh', 'PrincipalId': '65a5773b-7526-4677-86ac-aa901444b5ab', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c943fff8-5d28-4030-9285-e088cd7e28ea', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wbvvkruyce8nvwdh'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c943fff8-5d28-4030-9285-e088cd7e28ea', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wbvvkruyce8nvwdh'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '993911866582', 'workload_1_prod': '860355532246', 'workload_1_test': '6013..., 'test': [{'Id': '601352257512', 'Name': 'workload_1_test'}, {'Id': '227440497193', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-hmxrhqn1s3wy01c8', 'PrincipalId': 'f54b3d5e-c4b3-4389-bcac-bf82e1c1bbd0', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'f54b3d5e-c4b3-4389-bcac-bf82e1c1bbd0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hmxrhqn1s3wy01c8'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '241fe51d-64b3-4c9f-9879-02558c985958', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hmxrhqn1s3wy01c8'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '241fe51d-64b3-4c9f-9879-02558c985958', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hmxrhqn1s3wy01c8'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '447648909429', 'workload_1_prod': '593046120479', 'workload_1_test': '3474..., 'test': [{'Id': '347474885179', 'Name': 'workload_1_test'}, {'Id': '175026409552', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 10 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-k4hy9v0drfd9s7um', 'PrincipalId': 'f4ab9cad-4b7a-4f89-a504-843555262b83', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (80 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a0fa3dc0-da16-45d5-84ff-5f64f498597a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-k4hy9v0drfd9s7um'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a0fa3dc0-da16-45d5-84ff-5f64f498597a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-k4hy9v0drfd9s7um'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a0fa3dc0-da16-45d5-84ff-5f64f498597a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-k4hy9v0drfd9s7um'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '110427831262', 'workload_1_prod': '743093218332', 'workload_1_test': '7481..., 'test': [{'Id': '748154500346', 'Name': 'workload_1_test'}, {'Id': '034144282204', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-2aq5vj8j4p3osro7', 'PrincipalId': '6e67ee20-8c93-4e86-a122-abc556d6b477', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 409d63cc-de7c-4907-90cf-20ae9c874e0d
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 409d63cc-de7c-4907-90cf-20ae9c874e0d
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '717275810162', 'workload_1_prod': '266564565801', 'workload_1_test': '9526..., 'test': [{'Id': '952623377398', 'Name': 'workload_1_test'}, {'Id': '466917817556', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 10 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-0shhfkpuwn3m9bpt', 'PrincipalId': 'ed259bde-75df-4bf4-a949-6d7cdd66184f', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (80 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '46a1864b-cedd-4531-82e3-2b8977b41b20', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0shhfkpuwn3m9bpt'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '46a1864b-cedd-4531-82e3-2b8977b41b20', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0shhfkpuwn3m9bpt'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '46a1864b-cedd-4531-82e3-2b8977b41b20', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0shhfkpuwn3m9bpt'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '765234091343', 'workload_1_prod': '956363444032', 'workload_1_test': '8664..., 'test': [{'Id': '866421204637', 'Name': 'workload_1_test'}, {'Id': '517342526530', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-xldkxflmatnybio4', 'PrincipalId': '6a218a1e-10ec-453a-8e1d-edd92181a6a5', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '6a218a1e-10ec-453a-8e1d-edd92181a6a5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xldkxflmatnybio4'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'bed0b7fd-0f46-476b-aed1-29584c3ba9b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xldkxflmatnybio4'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'bed0b7fd-0f46-476b-aed1-29584c3ba9b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xldkxflmatnybio4'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '076404042931', 'workload_1_prod': '151401062596', 'workload_1_suspended': ..., 'test': [{'Id': '815175428706', 'Name': 'workload_1_test'}, {'Id': '292217775478', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-td9bgbft16i3hqkt', 'PrincipalId': 'ccbe71a3-f21c-40f6-9b9e-b986f63a3efe', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '988693779070', 'workload_1_prod': '477700548528', 'workload_1_test': '0017..., 'test': [{'Id': '001731583928', 'Name': 'workload_1_test'}, {'Id': '561016269454', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-xel7r9sepm6mi0ul', 'PrincipalId': '5f787cca-7ca7-40d5-a638-a7f9e2b2c3dc', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 2ed10df0-236a-4265-9fc8-13889f1300fc
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 2ed10df0-236a-4265-9fc8-13889f1300fc
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '743740262299', 'workload_1_prod': '619778631873', 'workload_1_test': '1806..., 'test': [{'Id': '180651773506', 'Name': 'workload_1_test'}, {'Id': '669058980701', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 12 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-qesmk7j4iskmkf0h', 'PrincipalId': '09c7d407-987c-4bfc-b6c6-4dfed8ba2ef6', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (96 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3e29fccf-0bd8-44e9-bffb-2acc1e9a0f24', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qesmk7j4iskmkf0h'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3e29fccf-0bd8-44e9-bffb-2acc1e9a0f24', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qesmk7j4iskmkf0h'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3e29fccf-0bd8-44e9-bffb-2acc1e9a0f24', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qesmk7j4iskmkf0h'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '850020875896', 'workload_1_prod': '741899861590', 'workload_1_test': '2502..._1_test'}, {'Id': '001253766358', 'Name': 'workload_2_test'}, {'Id': '516769524015', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 5 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-51k1vasrjqvai1n9', 'PrincipalId': '4869fc4e-3d6e-43be-bc49-1a8b87bda398', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (40 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 93a55c4b-71f6-4f92-8572-f11153576c71
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 93a55c4b-71f6-4f92-8572-f11153576c71
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '379575415737', 'workload_1_prod': '135206202707', 'workload_1_test': '8313..._1_test'}, {'Id': '235459019967', 'Name': 'workload_2_test'}, {'Id': '593947101355', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 13 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-ynxiczlp532j6mn6', 'PrincipalId': '07cdc716-e67b-40d7-863d-58fb85d75417', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (104 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '457972562200', 'workload_1_prod': '610523039062', 'workload_1_suspended': ..._1_test'}, {'Id': '986850210088', 'Name': 'workload_2_test'}, {'Id': '719376888903', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 13 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-nkhmafyeq8hn9ieh', 'PrincipalId': '5f339636-244d-40a4-9122-942ee23ff133', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (104 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '079980902824', 'workload_1_prod': '151833471316', 'workload_1_test': '8614..._1_test'}, {'Id': '740579634326', 'Name': 'workload_2_test'}, {'Id': '800473788803', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq', 'PrincipalId': '524fd857-b0c0-4011-91f0-738df4b48295', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_1
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '287e945d-7e8c-4f8d-8f6b-4c6a22d32cf8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '287e945d-7e8c-4f8d-8f6b-4c6a22d32cf8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_3
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '524fd857-b0c0-4011-91f0-738df4b48295', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '524fd857-b0c0-4011-91f0-738df4b48295', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '524fd857-b0c0-4011-91f0-738df4b48295', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-brddbzy1wqir1fhq'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '278355992678', 'workload_1_prod': '455190079128', 'workload_1_test': '3028..._1_test'}, {'Id': '138354578173', 'Name': 'workload_2_test'}, {'Id': '017391673180', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 13 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-kpxubyzv8syit4iv', 'PrincipalId': 'd35e9295-0887-4074-b8ea-37904bb74a82', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (104 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81ce2f39-4d98-4e7a-8191-a7c3f4a85265', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kpxubyzv8syit4iv'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81ce2f39-4d98-4e7a-8191-a7c3f4a85265', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kpxubyzv8syit4iv'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81ce2f39-4d98-4e7a-8191-a7c3f4a85265', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kpxubyzv8syit4iv'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '329506489823', 'workload_1_prod': '589989030678', 'workload_1_test': '1614..._1_test'}, {'Id': '270515079762', 'Name': 'workload_2_test'}, {'Id': '273034108088', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-0dwhry9jkpyhol94', 'PrincipalId': 'ba58cb8e-45a8-47ae-a25d-a8aedce2cccc', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c3533bd5-da49-4502-b29f-902276150388', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0dwhry9jkpyhol94'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c3533bd5-da49-4502-b29f-902276150388', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-0dwhry9jkpyhol94'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '173314126733', 'workload_1_prod': '070055304413', 'workload_1_test': '9754..._1_test'}, {'Id': '587604484691', 'Name': 'workload_2_test'}, {'Id': '376567319401', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 7 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-z4lvffgkrpopvvg7', 'PrincipalId': 'b22fd2c0-b7e1-4bc6-87e3-80f07879ff7c', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (56 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'b22fd2c0-b7e1-4bc6-87e3-80f07879ff7c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-z4lvffgkrpopvvg7'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '78921b31-638d-4be6-92c8-c1356dfff337', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-z4lvffgkrpopvvg7'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '78921b31-638d-4be6-92c8-c1356dfff337', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-z4lvffgkrpopvvg7'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '692836526335', 'workload_1_prod': '052060522544', 'workload_1_test': '3894..._1_test'}, {'Id': '299477697126', 'Name': 'workload_2_test'}, {'Id': '475008096179', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 13 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-xhvphtgeq1kllbp3', 'PrincipalId': '140d9546-9273-449f-87ba-1e1270273193', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (104 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5f72118b-7249-4b1b-ac8c-c2ecf00105ea', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xhvphtgeq1kllbp3'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5f72118b-7249-4b1b-ac8c-c2ecf00105ea', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xhvphtgeq1kllbp3'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5f72118b-7249-4b1b-ac8c-c2ecf00105ea', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xhvphtgeq1kllbp3'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '878287251032', 'workload_1_prod': '499340426667', 'workload_1_test': '9074..._1_test'}, {'Id': '584355224106', 'Name': 'workload_2_test'}, {'Id': '364173145707', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 5 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-culgsx3kgcpec8tt', 'PrincipalId': '236c2ad1-0b5b-45db-bfe1-3e601a48812a', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (40 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, a9547664-be00-4f16-a99e-7b9786fe27ad
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, a9547664-be00-4f16-a99e-7b9786fe27ad
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '576822190394', 'workload_1_prod': '484166716891', 'workload_1_test': '2154..._1_test'}, {'Id': '645131674076', 'Name': 'workload_2_test'}, {'Id': '372127524114', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 13 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-dmx25eonlcddt2il', 'PrincipalId': 'ddccbf49-8758-4b29-8c5f-da3bd8bedac3', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (104 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_1
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '40310ca6-56f2-4a4b-a77f-ef13a90ee2ef', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dmx25eonlcddt2il'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_2
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '40310ca6-56f2-4a4b-a77f-ef13a90ee2ef', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dmx25eonlcddt2il'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_account_3
2025-03-09 22:13:36 ERROR Target type: ACCOUNT
2025-03-09 22:13:36 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '40310ca6-56f2-4a4b-a77f-ef13a90ee2ef', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dmx25eonlcddt2il'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '068931575992', 'workload_1_prod': '848903090655', 'workload_1_test': '2451..._1_test'}, {'Id': '587266389941', 'Name': 'workload_2_test'}, {'Id': '739673317517', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 7 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-joiacp9gqk54sc5y', 'PrincipalId': 'ace37ff5-734d-4091-addd-5c2cfe629800', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (56 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_2
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'ace37ff5-734d-4091-addd-5c2cfe629800', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-joiacp9gqk54sc5y'}
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_4
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c655b0fc-ceee-43a9-8681-043f838bacf5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-joiacp9gqk54sc5y'}
2025-03-09 22:13:36 ERROR NOT VALID TARGET
2025-03-09 22:13:36 ERROR Target name: invalid_ou_5
2025-03-09 22:13:36 ERROR Target type: OU
2025-03-09 22:13:36 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'c655b0fc-ceee-43a9-8681-043f838bacf5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-joiacp9gqk54sc5y'}
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '069705237522', 'workload_1_prod': '365448375128', 'workload_1_suspended': ..._1_test'}, {'Id': '802876991097', 'Name': 'workload_2_test'}, {'Id': '584974959203', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 5 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-iawl7arktz0mxcg0', 'PrincipalId': 'a22f015f-eb68-4753-b7f3-96b6ceb07e15', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (40 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '463990989456', 'workload_1_prod': '887835831853', 'workload_1_test': '9781..._1_test'}, {'Id': '106598511773', 'Name': 'workload_2_test'}, {'Id': '954433910208', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 5 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-umuz9pxb8fs5lnh8', 'PrincipalId': 'bf3d2550-7955-4c97-a0de-4d6253bfb498', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (40 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:36 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:36 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 5b7a1867-9cda-45e0-b464-22694e95369a
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:36 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:36 INFO CONTINUING
2025-03-09 22:13:36 INFO Principal name: user1@testing.com, 5b7a1867-9cda-45e0-b464-22694e95369a
2025-03-09 22:13:36 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:36 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:36 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.0
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '193561857699', 'workload_1_prod': '532576515661', 'workload_1_test': '6794..._1_test'}, {'Id': '267322510954', 'Name': 'workload_2_test'}, {'Id': '596980496259', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 15 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-ur49j9uxry310l48', 'PrincipalId': '08c11bef-0523-4cbd-aa9b-bc9ffc4372b4', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (120 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '82f50019-36cf-419e-82c6-66fb02bdcb0a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ur49j9uxry310l48'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '82f50019-36cf-419e-82c6-66fb02bdcb0a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ur49j9uxry310l48'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '82f50019-36cf-419e-82c6-66fb02bdcb0a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ur49j9uxry310l48'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '546182586699', 'workload_1_prod': '524939347168', 'workload_1_test': '0521..., 'test': [{'Id': '052194804091', 'Name': 'workload_1_test'}, {'Id': '592572865516', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-e0phmnhu1zmrp7tm', 'PrincipalId': '5e5c659e-0917-42bb-bb15-a461f0c88d4d', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, ee96b1ef-3619-4f65-84a7-695d3b157a77
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, ee96b1ef-3619-4f65-84a7-695d3b157a77
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '701880950975', 'workload_1_prod': '495492053280', 'workload_1_test': '9830..., 'test': [{'Id': '983099032068', 'Name': 'workload_1_test'}, {'Id': '807113865677', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-8muqkntzng0sqdo0', 'PrincipalId': '9324815a-1e5d-4690-af01-661414a88c48', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '706502222130', 'workload_1_prod': '606553497528', 'workload_1_suspended': ..., 'test': [{'Id': '560977439804', 'Name': 'workload_1_test'}, {'Id': '102004509692', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-gpxpjqjpaqvcotst', 'PrincipalId': 'a7c19ed3-73ba-409f-857b-06b847f25a97', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '470610504538', 'workload_1_prod': '878701882924', 'workload_1_test': '1982..., 'test': [{'Id': '198239441835', 'Name': 'workload_1_test'}, {'Id': '127327420419', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp', 'PrincipalId': 'b96869e0-7567-4cc1-bd23-fa0cb55f55fa', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_1
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '9480c983-3213-4c8d-87c2-08d85875b271', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '9480c983-3213-4c8d-87c2-08d85875b271', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_3
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'b96869e0-7567-4cc1-bd23-fa0cb55f55fa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'b96869e0-7567-4cc1-bd23-fa0cb55f55fa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'b96869e0-7567-4cc1-bd23-fa0cb55f55fa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ifwr4znduztsyvp'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '812646058562', 'workload_1_prod': '529675543341', 'workload_1_test': '8508..., 'test': [{'Id': '850887725801', 'Name': 'workload_1_test'}, {'Id': '383935290345', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-bk5ji8tjj646ldiq', 'PrincipalId': 'ca48e569-7c0f-4ce6-85de-6c71eadc815e', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '17f62f04-7b98-4927-b18e-871ca322d7a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bk5ji8tjj646ldiq'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '17f62f04-7b98-4927-b18e-871ca322d7a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bk5ji8tjj646ldiq'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '17f62f04-7b98-4927-b18e-871ca322d7a6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bk5ji8tjj646ldiq'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '756875121826', 'workload_1_prod': '754370924877', 'workload_1_test': '3694..., 'test': [{'Id': '369485654973', 'Name': 'workload_1_test'}, {'Id': '464624840163', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-y1g1xcqrqwl4blgy', 'PrincipalId': '70faaf16-06c0-4d05-a318-b56484b75ee8', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'fc302348-b631-4f69-8fd7-b8ffa1d0a32d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y1g1xcqrqwl4blgy'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'fc302348-b631-4f69-8fd7-b8ffa1d0a32d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y1g1xcqrqwl4blgy'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '923173661686', 'workload_1_prod': '337855520718', 'workload_1_test': '2930..., 'test': [{'Id': '293062429447', 'Name': 'workload_1_test'}, {'Id': '926858670890', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 5 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-reljl8jc7bzgew7e', 'PrincipalId': '6190dcf4-8e1e-4222-97d3-a97c05e791c3', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (40 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '6190dcf4-8e1e-4222-97d3-a97c05e791c3', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-reljl8jc7bzgew7e'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1e79f88d-a9c4-492a-b8c6-2e02a4c3e9e4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-reljl8jc7bzgew7e'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1e79f88d-a9c4-492a-b8c6-2e02a4c3e9e4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-reljl8jc7bzgew7e'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '385178131148', 'workload_1_prod': '676566584426', 'workload_1_test': '0338..., 'test': [{'Id': '033868548529', 'Name': 'workload_1_test'}, {'Id': '468449720083', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-nhxcczwjwbwls96k', 'PrincipalId': '8424f756-063f-4f07-bc56-41ad44fca0ad', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f3dc541c-83f5-4c12-a996-57ad9811a5da', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-nhxcczwjwbwls96k'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f3dc541c-83f5-4c12-a996-57ad9811a5da', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-nhxcczwjwbwls96k'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f3dc541c-83f5-4c12-a996-57ad9811a5da', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-nhxcczwjwbwls96k'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '791047931680', 'workload_1_prod': '256149496748', 'workload_1_test': '4837..., 'test': [{'Id': '483793580292', 'Name': 'workload_1_test'}, {'Id': '214211499514', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-i3ro1rtzkjlj2vf4', 'PrincipalId': 'ce436d53-641f-4613-b780-fca7b7aebce2', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 2c12e9f4-6d1c-4139-9772-28b0aae2a7da
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 2c12e9f4-6d1c-4139-9772-28b0aae2a7da
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '743404523662', 'workload_1_prod': '585624160884', 'workload_1_test': '5403..., 'test': [{'Id': '540344528501', 'Name': 'workload_1_test'}, {'Id': '586058729137', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-els3z7kmz0gmhfoe', 'PrincipalId': '46b653f1-d5d8-48c2-bac4-f7bb4135152f', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1b8298db-c80f-4327-a781-fae73f241e06', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-els3z7kmz0gmhfoe'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1b8298db-c80f-4327-a781-fae73f241e06', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-els3z7kmz0gmhfoe'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1b8298db-c80f-4327-a781-fae73f241e06', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-els3z7kmz0gmhfoe'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '759554257559', 'workload_1_prod': '320237549293', 'workload_1_test': '7246..., 'test': [{'Id': '724655488928', 'Name': 'workload_1_test'}, {'Id': '566228172792', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 5 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-9xemtgz1qnpbh5la', 'PrincipalId': '74a58e80-c457-4807-b5c3-ba4b26c6cceb', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (40 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '74a58e80-c457-4807-b5c3-ba4b26c6cceb', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9xemtgz1qnpbh5la'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '070dcc2d-4b00-45e5-822b-855fd0e26662', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9xemtgz1qnpbh5la'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '070dcc2d-4b00-45e5-822b-855fd0e26662', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9xemtgz1qnpbh5la'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '151280720946', 'workload_1_prod': '611185012826', 'workload_1_suspended': ..., 'test': [{'Id': '426221382336', 'Name': 'workload_1_test'}, {'Id': '654668085896', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-8iphjv4il8ibgmav', 'PrincipalId': '7ddb2f3b-543e-45f6-a74c-56fff29eb27a', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '121445528567', 'workload_1_prod': '680243535256', 'workload_1_test': '2125..., 'test': [{'Id': '212510501722', 'Name': 'workload_1_test'}, {'Id': '143582271750', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-cqmmfhkxmwnez6md', 'PrincipalId': '5cb1061d-f16a-4ecc-b530-71bdb37f5950', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 8f2909fd-fac5-44a8-be52-679baddd7f86
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 8f2909fd-fac5-44a8-be52-679baddd7f86
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '460734899348', 'workload_1_prod': '736067658787', 'workload_1_test': '2304..., 'test': [{'Id': '230465788279', 'Name': 'workload_1_test'}, {'Id': '550030896056', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 10 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-fzofpulenwljxapc', 'PrincipalId': 'f93e7657-cad6-4d30-aaa7-6d45b9266b3c', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (80 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4d74aef1-33d7-4ea6-8f69-0b2c4a0a0dca', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fzofpulenwljxapc'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4d74aef1-33d7-4ea6-8f69-0b2c4a0a0dca', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fzofpulenwljxapc'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4d74aef1-33d7-4ea6-8f69-0b2c4a0a0dca', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fzofpulenwljxapc'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '010050233216', 'workload_1_prod': '119764941725', 'workload_1_test': '4402..._1_test'}, {'Id': '940463913499', 'Name': 'workload_2_test'}, {'Id': '664507004659', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-mvbjelkdtiv3pemi', 'PrincipalId': '6b27592e-c7d0-48be-8731-ea424e6fce6f', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 57e4cf1b-47e2-4ad1-9350-13cebf94869d
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, 57e4cf1b-47e2-4ad1-9350-13cebf94869d
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '527429183404', 'workload_1_prod': '509767751901', 'workload_1_test': '9956..._1_test'}, {'Id': '761304668092', 'Name': 'workload_2_test'}, {'Id': '229227799103', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 11 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-akdfblxir9obibyi', 'PrincipalId': 'e4908851-9806-4583-9788-527ddfe29cd1', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (88 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '631686891053', 'workload_1_prod': '114943989582', 'workload_1_suspended': ..._1_test'}, {'Id': '468755224468', 'Name': 'workload_2_test'}, {'Id': '007123308312', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 11 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-1f7rthp50leykfy8', 'PrincipalId': '3598f174-88aa-4d94-8ef5-eec1592cdda9', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (88 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '732949703735', 'workload_1_prod': '103500717570', 'workload_1_test': '6692..._1_test'}, {'Id': '251043590204', 'Name': 'workload_2_test'}, {'Id': '992174849382', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5', 'PrincipalId': '3d80a2bd-ea41-4142-8bdf-e0ea55aa9079', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_1
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '1a474caf-7394-4530-98ab-bf6c7c6b4be9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '1a474caf-7394-4530-98ab-bf6c7c6b4be9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_3
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '3d80a2bd-ea41-4142-8bdf-e0ea55aa9079', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '3d80a2bd-ea41-4142-8bdf-e0ea55aa9079', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '3d80a2bd-ea41-4142-8bdf-e0ea55aa9079', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dq6n6duzjgund9e5'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '948462707265', 'workload_1_prod': '546942040278', 'workload_1_test': '0799..._1_test'}, {'Id': '166265931670', 'Name': 'workload_2_test'}, {'Id': '673689388003', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 11 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-pqnnncyurqhqnoob', 'PrincipalId': 'a67fd32d-e442-4cd6-ae24-a450cf20f3fe', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (88 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c9001348-5864-4eab-a13d-815547c5ca91', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pqnnncyurqhqnoob'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c9001348-5864-4eab-a13d-815547c5ca91', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pqnnncyurqhqnoob'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c9001348-5864-4eab-a13d-815547c5ca91', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-pqnnncyurqhqnoob'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '562417965231', 'workload_1_prod': '450699644214', 'workload_1_test': '3139..._1_test'}, {'Id': '400833600901', 'Name': 'workload_2_test'}, {'Id': '886140569855', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-ptltanr7rqaex29k', 'PrincipalId': '35a23468-6b04-49ea-aed9-1458c1f3caa8', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '07fb0c25-2554-49c0-ab02-6c190c822d87', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ptltanr7rqaex29k'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '07fb0c25-2554-49c0-ab02-6c190c822d87', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ptltanr7rqaex29k'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '813015679115', 'workload_1_prod': '869277551503', 'workload_1_test': '5764..._1_test'}, {'Id': '566224497792', 'Name': 'workload_2_test'}, {'Id': '779286667348', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-exikzrhyzc7shtov', 'PrincipalId': '4b635b9f-ba8b-4301-ae14-e07ab1733637', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '4b635b9f-ba8b-4301-ae14-e07ab1733637', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-exikzrhyzc7shtov'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '48b3e2bc-25a4-4cf0-a836-741aeec3c1d9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-exikzrhyzc7shtov'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '48b3e2bc-25a4-4cf0-a836-741aeec3c1d9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-exikzrhyzc7shtov'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '216326888564', 'workload_1_prod': '301555857027', 'workload_1_test': '7438..._1_test'}, {'Id': '405072337807', 'Name': 'workload_2_test'}, {'Id': '125582140713', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 11 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-yjh8lkh1gkdhegnm', 'PrincipalId': 'f6cc6368-de02-47da-a378-1772eed9359b', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (88 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '546bc673-3028-49d1-8538-40a81a72f278', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-yjh8lkh1gkdhegnm'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '546bc673-3028-49d1-8538-40a81a72f278', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-yjh8lkh1gkdhegnm'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '546bc673-3028-49d1-8538-40a81a72f278', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-yjh8lkh1gkdhegnm'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '556010722115', 'workload_1_prod': '678853619256', 'workload_1_test': '7432..._1_test'}, {'Id': '487855239359', 'Name': 'workload_2_test'}, {'Id': '874230734424', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-npyehxkcl496zco8', 'PrincipalId': 'bd683c9b-e7a2-4d9e-aa1c-160ad222d392', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, e6e4a658-b3db-4895-b920-c21b1c289d88
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, e6e4a658-b3db-4895-b920-c21b1c289d88
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '203337446339', 'workload_1_prod': '792338420930', 'workload_1_test': '0033..._1_test'}, {'Id': '072590836088', 'Name': 'workload_2_test'}, {'Id': '293238772948', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 11 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-gwmvjllzoz0arpnv', 'PrincipalId': '34efb8bb-56fa-425a-8eb6-0179051115d3', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (88 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_1
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'fba67946-3e89-4af8-948c-49da4cfcc768', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gwmvjllzoz0arpnv'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_2
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'fba67946-3e89-4af8-948c-49da4cfcc768', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gwmvjllzoz0arpnv'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_account_3
2025-03-09 22:13:37 ERROR Target type: ACCOUNT
2025-03-09 22:13:37 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'fba67946-3e89-4af8-948c-49da4cfcc768', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gwmvjllzoz0arpnv'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '197971086735', 'workload_1_prod': '882551200799', 'workload_1_test': '1380..._1_test'}, {'Id': '531855219569', 'Name': 'workload_2_test'}, {'Id': '768002521435', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-mvcslcfz6fu2pipy', 'PrincipalId': 'd0614913-9c17-4d91-b7f5-13c7dd330844', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_2
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'd0614913-9c17-4d91-b7f5-13c7dd330844', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mvcslcfz6fu2pipy'}
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_4
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'da8f2267-ba0f-4056-b105-3f4bfa5d9288', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mvcslcfz6fu2pipy'}
2025-03-09 22:13:37 ERROR NOT VALID TARGET
2025-03-09 22:13:37 ERROR Target name: invalid_ou_5
2025-03-09 22:13:37 ERROR Target type: OU
2025-03-09 22:13:37 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'da8f2267-ba0f-4056-b105-3f4bfa5d9288', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mvcslcfz6fu2pipy'}
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '562444782251', 'workload_1_prod': '041496568049', 'workload_1_suspended': ..._1_test'}, {'Id': '940272178896', 'Name': 'workload_2_test'}, {'Id': '907534543116', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-08dmmmczqymlumtg', 'PrincipalId': '784f7392-c500-4596-a6a0-e8722fae950c', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '207247532682', 'workload_1_prod': '540845362088', 'workload_1_test': '4580..._1_test'}, {'Id': '999118795124', 'Name': 'workload_2_test'}, {'Id': '985915612391', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-ju0umm72ygnovfa0', 'PrincipalId': '509bdc70-4970-4cae-b3b4-5dc38d856574', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:37 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:37 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, faba440e-33ef-44e2-85ba-b11fa76cf928
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:37 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:37 INFO CONTINUING
2025-03-09 22:13:37 INFO Principal name: user1@testing.com, faba440e-33ef-44e2-85ba-b11fa76cf928
2025-03-09 22:13:37 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:37 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:37 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.2
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '204677364004', 'workload_1_prod': '248166553240', 'workload_1_test': '0933..._1_test'}, {'Id': '267277807481', 'Name': 'workload_2_test'}, {'Id': '996203824060', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 12 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-deri21etglrciftu', 'PrincipalId': 'fcfad15d-fda4-41d1-b684-c01beed36b94', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (96 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a529efdd-e59b-4465-b7e0-ebfac4c59893', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-deri21etglrciftu'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a529efdd-e59b-4465-b7e0-ebfac4c59893', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-deri21etglrciftu'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a529efdd-e59b-4465-b7e0-ebfac4c59893', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-deri21etglrciftu'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '670483342725', 'workload_1_prod': '893659220343', 'workload_1_test': '0989..., 'test': [{'Id': '098952781071', 'Name': 'workload_1_test'}, {'Id': '815500448982', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-oo8w5vo1hkcxyjja', 'PrincipalId': '0b3c3dcf-33ec-479e-82de-d5d36c9b2d8b', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 1a04cb2c-7e30-48d7-bc8e-d3451841e598
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 1a04cb2c-7e30-48d7-bc8e-d3451841e598
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '241286157191', 'workload_1_prod': '960151776386', 'workload_1_test': '3862..., 'test': [{'Id': '386293295210', 'Name': 'workload_1_test'}, {'Id': '965361696469', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wfdlqgtwxvsx7txt', 'PrincipalId': '57b5d3b8-d5d1-443a-a3f9-61a8d4207fe7', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '543497999335', 'workload_1_prod': '315261497130', 'workload_1_suspended': ..., 'test': [{'Id': '774258908773', 'Name': 'workload_1_test'}, {'Id': '217806716169', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1hxcz4vnhlhzvj5z', 'PrincipalId': '959332fd-a487-4ddf-a97e-6e3b1500d296', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '715847855657', 'workload_1_prod': '900213799137', 'workload_1_test': '1695..., 'test': [{'Id': '169522171570', 'Name': 'workload_1_test'}, {'Id': '149979292446', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev', 'PrincipalId': '9f207350-c7ea-4267-bf8d-dc398c90673b', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_1
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'ae40f099-1cd5-4a07-a3ce-4246a29d46e6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'ae40f099-1cd5-4a07-a3ce-4246a29d46e6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_3
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f207350-c7ea-4267-bf8d-dc398c90673b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f207350-c7ea-4267-bf8d-dc398c90673b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f207350-c7ea-4267-bf8d-dc398c90673b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vo5tksejabhlvwev'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '301258905674', 'workload_1_prod': '178509578515', 'workload_1_test': '2958..., 'test': [{'Id': '295864551103', 'Name': 'workload_1_test'}, {'Id': '648683228397', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-r1oj00tszpkjelii', 'PrincipalId': '88f1115a-39f4-4982-9973-37b049d1bf74', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '88f1115a-39f4-4982-9973-37b049d1bf74', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-r1oj00tszpkjelii'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '88f1115a-39f4-4982-9973-37b049d1bf74', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-r1oj00tszpkjelii'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '88f1115a-39f4-4982-9973-37b049d1bf74', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-r1oj00tszpkjelii'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '104624209274', 'workload_1_prod': '804551219327', 'workload_1_test': '4228..., 'test': [{'Id': '422847909429', 'Name': 'workload_1_test'}, {'Id': '199035073834', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-bqoadxazfe4navm5', 'PrincipalId': '99a59831-5954-462c-ac40-e23d9e9f473e', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '669a7ee2-2323-45d0-8fc1-f21fbf611fe9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bqoadxazfe4navm5'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '669a7ee2-2323-45d0-8fc1-f21fbf611fe9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bqoadxazfe4navm5'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '572653752816', 'workload_1_prod': '204828187930', 'workload_1_test': '7463..., 'test': [{'Id': '746321123193', 'Name': 'workload_1_test'}, {'Id': '211544779730', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hyv3nncy2h2lbzf6', 'PrincipalId': 'a84c41d1-3c30-4cca-9a74-3d8ce369d78d', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '88428231-387f-403f-b38f-7584777f2b2f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hyv3nncy2h2lbzf6'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'a84c41d1-3c30-4cca-9a74-3d8ce369d78d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hyv3nncy2h2lbzf6'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'a84c41d1-3c30-4cca-9a74-3d8ce369d78d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-hyv3nncy2h2lbzf6'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '815336430731', 'workload_1_prod': '851554533428', 'workload_1_test': '3957..., 'test': [{'Id': '395744297127', 'Name': 'workload_1_test'}, {'Id': '598273245926', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mx60gqdxcxfanxu0', 'PrincipalId': '789e4c00-14d5-4161-ac53-2b5bcb8d31a8', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '789e4c00-14d5-4161-ac53-2b5bcb8d31a8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mx60gqdxcxfanxu0'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '789e4c00-14d5-4161-ac53-2b5bcb8d31a8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mx60gqdxcxfanxu0'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '789e4c00-14d5-4161-ac53-2b5bcb8d31a8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mx60gqdxcxfanxu0'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '765920084286', 'workload_1_prod': '073088548648', 'workload_1_test': '2231..., 'test': [{'Id': '223101829427', 'Name': 'workload_1_test'}, {'Id': '517852607508', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-bafj2bvgkwg0orht', 'PrincipalId': '045df83c-1a99-4afc-b067-f57e6045fae4', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 50f1eba0-db95-4cea-9b04-d25fa2a28f5e
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 50f1eba0-db95-4cea-9b04-d25fa2a28f5e
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '330169366493', 'workload_1_prod': '816223704493', 'workload_1_test': '6983..., 'test': [{'Id': '698322124438', 'Name': 'workload_1_test'}, {'Id': '891310142448', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-iuwu8lzw4geh4iiu', 'PrincipalId': '75b6fb4a-132a-4e5c-8476-7859d4532f61', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '75b6fb4a-132a-4e5c-8476-7859d4532f61', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-iuwu8lzw4geh4iiu'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '75b6fb4a-132a-4e5c-8476-7859d4532f61', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-iuwu8lzw4geh4iiu'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '75b6fb4a-132a-4e5c-8476-7859d4532f61', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-iuwu8lzw4geh4iiu'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '729084375561', 'workload_1_prod': '069633525122', 'workload_1_test': '2034..., 'test': [{'Id': '203491084570', 'Name': 'workload_1_test'}, {'Id': '788940121550', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-zko4wsepoimhxyel', 'PrincipalId': '148f847b-9a03-44e0-ac44-47206135c61e', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'aefc409e-0c55-4143-8283-ff98fff9fd50', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-zko4wsepoimhxyel'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '148f847b-9a03-44e0-ac44-47206135c61e', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-zko4wsepoimhxyel'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '148f847b-9a03-44e0-ac44-47206135c61e', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-zko4wsepoimhxyel'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '069081274782', 'workload_1_prod': '247978230980', 'workload_1_suspended': ..., 'test': [{'Id': '115457347230', 'Name': 'workload_1_test'}, {'Id': '104394006834', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-mcy0fqxevw2ovitc', 'PrincipalId': 'dffa638d-e5a8-4f25-b9d1-baf6fb4e6462', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '137692257422', 'workload_1_prod': '361196313759', 'workload_1_test': '2562..., 'test': [{'Id': '256297397913', 'Name': 'workload_1_test'}, {'Id': '961377064205', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-2ivjjrbbpdmdkawd', 'PrincipalId': 'aab1788b-bb42-41aa-a75d-19478b480b97', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 3d6563ee-821b-492f-8aaf-5988a367f5d4
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 3d6563ee-821b-492f-8aaf-5988a367f5d4
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '671217458071', 'workload_1_prod': '014401272516', 'workload_1_test': '9230..., 'test': [{'Id': '923019290248', 'Name': 'workload_1_test'}, {'Id': '890940326277', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wyibkeq0lba2kans', 'PrincipalId': '64943683-e97f-4bad-939d-04c004eb50f9', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c58f3551-30be-4e6a-ba8f-7cd82de5c8c3', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wyibkeq0lba2kans'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c58f3551-30be-4e6a-ba8f-7cd82de5c8c3', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wyibkeq0lba2kans'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c58f3551-30be-4e6a-ba8f-7cd82de5c8c3', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wyibkeq0lba2kans'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '621561347784', 'workload_1_prod': '613263501286', 'workload_1_test': '6047..._1_test'}, {'Id': '940051027775', 'Name': 'workload_2_test'}, {'Id': '387591794172', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-qwdjm1dmwhauweup', 'PrincipalId': 'ac27712c-cec8-402e-8b4e-65c6c4081cd2', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 3e9c33f1-10fb-4534-a046-835b894c3f75
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 3e9c33f1-10fb-4534-a046-835b894c3f75
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '409627997128', 'workload_1_prod': '262118857551', 'workload_1_test': '7852..._1_test'}, {'Id': '944993871449', 'Name': 'workload_2_test'}, {'Id': '854987875912', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-nbrtn1jhu6c6cdem', 'PrincipalId': '8172435c-55a1-466f-bae6-deea6216bdd0', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '493168625268', 'workload_1_prod': '844861725920', 'workload_1_suspended': ..._1_test'}, {'Id': '890737632849', 'Name': 'workload_2_test'}, {'Id': '922090436756', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mhmvsydfesiue5yd', 'PrincipalId': '9567f4a0-80b7-4c4e-8664-c839057a0f32', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '493424674095', 'workload_1_prod': '009468659509', 'workload_1_test': '4506..._1_test'}, {'Id': '527831784886', 'Name': 'workload_2_test'}, {'Id': '396107613864', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi', 'PrincipalId': '9f606be5-0480-4792-af1f-d91380f0b004', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_1
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '303a05d0-3f07-4de6-9b27-59d8f220479b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '303a05d0-3f07-4de6-9b27-59d8f220479b', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_3
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f606be5-0480-4792-af1f-d91380f0b004', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f606be5-0480-4792-af1f-d91380f0b004', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '9f606be5-0480-4792-af1f-d91380f0b004', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-1ry6zzkqy6pntthi'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '350924021566', 'workload_1_prod': '419953540039', 'workload_1_test': '4504..._1_test'}, {'Id': '919895136910', 'Name': 'workload_2_test'}, {'Id': '663830330656', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9bgdji8ffpg9qka1', 'PrincipalId': '62fa15e4-7f51-4861-afb0-95b576c3d006', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '62fa15e4-7f51-4861-afb0-95b576c3d006', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9bgdji8ffpg9qka1'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '62fa15e4-7f51-4861-afb0-95b576c3d006', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9bgdji8ffpg9qka1'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '62fa15e4-7f51-4861-afb0-95b576c3d006', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-9bgdji8ffpg9qka1'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '333918434965', 'workload_1_prod': '829788386513', 'workload_1_test': '2959..._1_test'}, {'Id': '385362383939', 'Name': 'workload_2_test'}, {'Id': '425957044017', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-bmguv09q8zjl5vcd', 'PrincipalId': '55a793bc-3e9c-4e16-ab29-594303eeadc2', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'f45fe01b-132a-40d0-be82-7ffe145cade5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bmguv09q8zjl5vcd'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'f45fe01b-132a-40d0-be82-7ffe145cade5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-bmguv09q8zjl5vcd'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '588868898093', 'workload_1_prod': '613894240463', 'workload_1_test': '6488..._1_test'}, {'Id': '179940287211', 'Name': 'workload_2_test'}, {'Id': '776524927056', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 5 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-chd7o8d2vutx8v6q', 'PrincipalId': '55250b83-9e6d-4b09-a1fc-ebd3dd18c5a2', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (40 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'a2836e1e-a9e8-40fd-af87-34a6e33741a9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-chd7o8d2vutx8v6q'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '55250b83-9e6d-4b09-a1fc-ebd3dd18c5a2', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-chd7o8d2vutx8v6q'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '55250b83-9e6d-4b09-a1fc-ebd3dd18c5a2', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-chd7o8d2vutx8v6q'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '395242813137', 'workload_1_prod': '884946228331', 'workload_1_test': '3969..._1_test'}, {'Id': '826692838296', 'Name': 'workload_2_test'}, {'Id': '543408136501', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mropchfamvcomlju', 'PrincipalId': '5e4c64ba-bee4-4cb1-8ed0-0634005c9990', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e4c64ba-bee4-4cb1-8ed0-0634005c9990', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mropchfamvcomlju'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e4c64ba-bee4-4cb1-8ed0-0634005c9990', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mropchfamvcomlju'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e4c64ba-bee4-4cb1-8ed0-0634005c9990', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mropchfamvcomlju'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '141505493082', 'workload_1_prod': '273832938089', 'workload_1_test': '2222..._1_test'}, {'Id': '830654924755', 'Name': 'workload_2_test'}, {'Id': '523218303485', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-tuu4jnspw6hrymdy', 'PrincipalId': '7ebb0cca-feb0-4084-8c11-ea6e17bdac79', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, ed196628-a3cf-4ca7-9565-6cfa8c2fc081
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, ed196628-a3cf-4ca7-9565-6cfa8c2fc081
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '590769068732', 'workload_1_prod': '458635623473', 'workload_1_test': '5084..._1_test'}, {'Id': '156676760682', 'Name': 'workload_2_test'}, {'Id': '808614523887', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 8 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4x6t0gc30fltgnna', 'PrincipalId': 'e14bed01-fc0c-43df-b852-c7a2609d3744', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e14bed01-fc0c-43df-b852-c7a2609d3744', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4x6t0gc30fltgnna'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e14bed01-fc0c-43df-b852-c7a2609d3744', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4x6t0gc30fltgnna'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e14bed01-fc0c-43df-b852-c7a2609d3744', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4x6t0gc30fltgnna'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '834997866328', 'workload_1_prod': '248586614891', 'workload_1_test': '9335..._1_test'}, {'Id': '759921612351', 'Name': 'workload_2_test'}, {'Id': '646800840919', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 5 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-e1s3rnp9yk2ktfqq', 'PrincipalId': 'e7419b67-7d46-4b17-9f54-f6068c0d262c', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (40 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_2
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '3b35af06-e4e6-4a90-b479-e292b568504f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-e1s3rnp9yk2ktfqq'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_4
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'e7419b67-7d46-4b17-9f54-f6068c0d262c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-e1s3rnp9yk2ktfqq'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_ou_5
2025-03-09 22:13:38 ERROR Target type: OU
2025-03-09 22:13:38 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'e7419b67-7d46-4b17-9f54-f6068c0d262c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-e1s3rnp9yk2ktfqq'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '283748624678', 'workload_1_prod': '898611297850', 'workload_1_suspended': ..._1_test'}, {'Id': '366189208460', 'Name': 'workload_2_test'}, {'Id': '484221202169', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-zinrkybpxrw6cxpl', 'PrincipalId': '758351b9-e0ce-4702-a6a6-627f41509c2a', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '714975842308', 'workload_1_prod': '042164793041', 'workload_1_test': '7461..._1_test'}, {'Id': '617534279055', 'Name': 'workload_2_test'}, {'Id': '163995892838', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-gdrmehz7ddt98kzx', 'PrincipalId': '49c49056-e9f9-4e40-8ca3-ffbf59a6bb2c', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 8819a202-d1a0-4f8c-b54a-5760558cedd3
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO CONTINUING
2025-03-09 22:13:38 INFO Principal name: user1@testing.com, 8819a202-d1a0-4f8c-b54a-5760558cedd3
2025-03-09 22:13:38 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.4
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '605489700228', 'workload_1_prod': '576638129034', 'workload_1_test': '2042..._1_test'}, {'Id': '022380229093', 'Name': 'workload_2_test'}, {'Id': '216122066734', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...R', ...}, ...] == []
E         
E         Left contains 9 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dv4sflazzqwhzuln', 'PrincipalId': '7ffed82c-e6f2-464d-9f33-83e605d4f1b6', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (72 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:38 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:38 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:38 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_1
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7ffed82c-e6f2-464d-9f33-83e605d4f1b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dv4sflazzqwhzuln'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_2
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7ffed82c-e6f2-464d-9f33-83e605d4f1b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dv4sflazzqwhzuln'}
2025-03-09 22:13:38 ERROR NOT VALID TARGET
2025-03-09 22:13:38 ERROR Target name: invalid_account_3
2025-03-09 22:13:38 ERROR Target type: ACCOUNT
2025-03-09 22:13:38 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7ffed82c-e6f2-464d-9f33-83e605d4f1b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dv4sflazzqwhzuln'}
2025-03-09 22:13:38 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '775762729158', 'workload_1_prod': '060094314288', 'workload_1_test': '4606..., 'test': [{'Id': '460620917173', 'Name': 'workload_1_test'}, {'Id': '798046581818', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-xmcfx6mg9y2xebqq', 'PrincipalId': 'c2240161-f329-406e-99e5-94ea3e31be94', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, d6afa24e-ee1b-470a-be0f-43fc1dfae592
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, d6afa24e-ee1b-470a-be0f-43fc1dfae592
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '784095483220', 'workload_1_prod': '876678139149', 'workload_1_test': '4145..., 'test': [{'Id': '414509172282', 'Name': 'workload_1_test'}, {'Id': '231332109332', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-chbuotplaoeot9s4', 'PrincipalId': 'b5a344d9-a400-46b8-8244-e8d382323965', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '919156412560', 'workload_1_prod': '842807433546', 'workload_1_suspended': ..., 'test': [{'Id': '590195635716', 'Name': 'workload_1_test'}, {'Id': '413082223435', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-rpbdetx26xcukh8i', 'PrincipalId': 'c6b6763b-548e-441b-9ec5-ebe34338adeb', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '541465978048', 'workload_1_prod': '805493053066', 'workload_1_test': '9361..., 'test': [{'Id': '936135463503', 'Name': 'workload_1_test'}, {'Id': '467218049311', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv', 'PrincipalId': '15608f3a-9129-4244-b145-327e1b0f4008', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_1
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'aa21b96a-9fd6-40b0-a84a-ab1c6077deaa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'aa21b96a-9fd6-40b0-a84a-ab1c6077deaa', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_3
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '15608f3a-9129-4244-b145-327e1b0f4008', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '15608f3a-9129-4244-b145-327e1b0f4008', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '15608f3a-9129-4244-b145-327e1b0f4008', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fjomgsmffhwwt1lv'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '475184682464', 'workload_1_prod': '898078305916', 'workload_1_test': '9740..., 'test': [{'Id': '974015706318', 'Name': 'workload_1_test'}, {'Id': '909801082906', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ubfhhnigdmp1l0em', 'PrincipalId': '1f42a35c-4f8f-470b-8761-47767f39d546', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1f42a35c-4f8f-470b-8761-47767f39d546', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ubfhhnigdmp1l0em'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1f42a35c-4f8f-470b-8761-47767f39d546', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ubfhhnigdmp1l0em'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '1f42a35c-4f8f-470b-8761-47767f39d546', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ubfhhnigdmp1l0em'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '894276942218', 'workload_1_prod': '161260355419', 'workload_1_test': '3941..., 'test': [{'Id': '394176471780', 'Name': 'workload_1_test'}, {'Id': '616782497851', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-sznl8ryrgeiedgb0', 'PrincipalId': '3a5b99a5-2553-4478-99f0-783fd912a8b0', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '51741658-9a91-449d-ada1-37097fdb9840', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-sznl8ryrgeiedgb0'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '51741658-9a91-449d-ada1-37097fdb9840', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-sznl8ryrgeiedgb0'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '289930056423', 'workload_1_prod': '113144269726', 'workload_1_test': '2240..., 'test': [{'Id': '224004693990', 'Name': 'workload_1_test'}, {'Id': '223230001951', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jq4r7zftjzmfvftk', 'PrincipalId': '7533b627-f99b-43c3-a213-09da7a1b9189', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '68b24782-da22-4c52-b80a-b989d173f7dd', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jq4r7zftjzmfvftk'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '7533b627-f99b-43c3-a213-09da7a1b9189', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jq4r7zftjzmfvftk'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '7533b627-f99b-43c3-a213-09da7a1b9189', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jq4r7zftjzmfvftk'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '856005353186', 'workload_1_prod': '489712891701', 'workload_1_test': '3236..., 'test': [{'Id': '323671759592', 'Name': 'workload_1_test'}, {'Id': '024898137860', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gkaorw85oins2mni', 'PrincipalId': '37429422-5791-40ec-b612-bb63d6af7926', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '37429422-5791-40ec-b612-bb63d6af7926', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gkaorw85oins2mni'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '37429422-5791-40ec-b612-bb63d6af7926', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gkaorw85oins2mni'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '37429422-5791-40ec-b612-bb63d6af7926', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gkaorw85oins2mni'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '978615371220', 'workload_1_prod': '753619400628', 'workload_1_test': '9755..., 'test': [{'Id': '975544189394', 'Name': 'workload_1_test'}, {'Id': '266216919260', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-q8v4ncbw6vjnkjji', 'PrincipalId': 'c72a4fbf-776f-465e-bf55-7900382d21de', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 866a309c-e567-4533-941b-4af8fe5f037d
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 866a309c-e567-4533-941b-4af8fe5f037d
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '725760465204', 'workload_1_prod': '826103986133', 'workload_1_test': '4938..., 'test': [{'Id': '493814954479', 'Name': 'workload_1_test'}, {'Id': '585527864331', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 4 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kbqrw1q9rzhebuqv', 'PrincipalId': '43d4aea4-29e1-4e36-9428-a09886d0bdf5', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (32 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '43d4aea4-29e1-4e36-9428-a09886d0bdf5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kbqrw1q9rzhebuqv'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '43d4aea4-29e1-4e36-9428-a09886d0bdf5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kbqrw1q9rzhebuqv'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '43d4aea4-29e1-4e36-9428-a09886d0bdf5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-kbqrw1q9rzhebuqv'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '503996819280', 'workload_1_prod': '806048338541', 'workload_1_test': '2125..., 'test': [{'Id': '212507928429', 'Name': 'workload_1_test'}, {'Id': '687946427291', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-39tft22yhhlnhwbo', 'PrincipalId': '1a9697fb-5bb6-438b-a255-7a73fe8da2a9', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'f4ee439a-56a5-4a32-9994-d628b1656f15', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-39tft22yhhlnhwbo'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1a9697fb-5bb6-438b-a255-7a73fe8da2a9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-39tft22yhhlnhwbo'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '1a9697fb-5bb6-438b-a255-7a73fe8da2a9', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-39tft22yhhlnhwbo'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '761017400726', 'workload_1_prod': '537819519080', 'workload_1_suspended': ..., 'test': [{'Id': '001614241547', 'Name': 'workload_1_test'}, {'Id': '924678123199', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-fkgo7qxa5zzd4z5p', 'PrincipalId': '6cc68b18-6acd-483e-b5b5-5a2fc4ade0ed', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '437135655748', 'workload_1_prod': '657519194301', 'workload_1_test': '6275..., 'test': [{'Id': '627504124824', 'Name': 'workload_1_test'}, {'Id': '638992920209', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-wvf17mcfole8km1n', 'PrincipalId': '9e4ac129-ec47-4193-b05d-f5b6dc71b4c8', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 50b661bc-7439-4239-8fef-5b5f4a7d69c4
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 50b661bc-7439-4239-8fef-5b5f4a7d69c4
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '453304253917', 'workload_1_prod': '313081803330', 'workload_1_test': '5267..., 'test': [{'Id': '526725569721', 'Name': 'workload_1_test'}, {'Id': '380968065412', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 5 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-cbw7y64nmisno0jt', 'PrincipalId': '8387c100-5e68-4e29-a490-b89107dd4a7b', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (40 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c18cdd85-8949-4b32-8f20-1c56ae94bd63', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-cbw7y64nmisno0jt'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c18cdd85-8949-4b32-8f20-1c56ae94bd63', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-cbw7y64nmisno0jt'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'c18cdd85-8949-4b32-8f20-1c56ae94bd63', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-cbw7y64nmisno0jt'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '732669704434', 'workload_1_prod': '591480106901', 'workload_1_test': '9472..._1_test'}, {'Id': '622674417206', 'Name': 'workload_2_test'}, {'Id': '519531108583', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-kgopw2wkge1xhxen', 'PrincipalId': '84abfb3e-765a-495f-b059-16a646830a76', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 005ea2fd-fb8d-492e-8beb-033eaf907a0f
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 005ea2fd-fb8d-492e-8beb-033eaf907a0f
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '790330208625', 'workload_1_prod': '448953358307', 'workload_1_test': '5375..._1_test'}, {'Id': '299896499640', 'Name': 'workload_2_test'}, {'Id': '583205469487', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-8bvusiosl2jmvdbx', 'PrincipalId': '7be31d02-bef0-462d-a717-f12971df8a95', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '587704960098', 'workload_1_prod': '613299574013', 'workload_1_suspended': ..._1_test'}, {'Id': '630290643431', 'Name': 'workload_2_test'}, {'Id': '536985300698', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-xwb06rekcxgolvps', 'PrincipalId': '6be72e09-1cf8-4819-99c7-c2d3452377b8', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '919881700059', 'workload_1_prod': '333251133764', 'workload_1_test': '0310..._1_test'}, {'Id': '576475362245', 'Name': 'workload_2_test'}, {'Id': '257962215029', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe', 'PrincipalId': '7ee0d017-589d-439a-b007-bb74b2a7c3e4', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_1
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '845ec271-cae8-4974-a90e-61986c7b4599', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '845ec271-cae8-4974-a90e-61986c7b4599', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_3
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '7ee0d017-589d-439a-b007-bb74b2a7c3e4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '7ee0d017-589d-439a-b007-bb74b2a7c3e4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '7ee0d017-589d-439a-b007-bb74b2a7c3e4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-vylciipkxrmnsrbe'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '179932976160', 'workload_1_prod': '843708705357', 'workload_1_test': '0332..._1_test'}, {'Id': '608961821851', 'Name': 'workload_2_test'}, {'Id': '245247726967', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-lros91uqbyzrmrec', 'PrincipalId': 'f349d1dc-dd41-4aea-b9ae-e600fdd12fb5', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f349d1dc-dd41-4aea-b9ae-e600fdd12fb5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-lros91uqbyzrmrec'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f349d1dc-dd41-4aea-b9ae-e600fdd12fb5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-lros91uqbyzrmrec'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'f349d1dc-dd41-4aea-b9ae-e600fdd12fb5', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-lros91uqbyzrmrec'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '164522208289', 'workload_1_prod': '629387831913', 'workload_1_test': '8647..._1_test'}, {'Id': '589522911482', 'Name': 'workload_2_test'}, {'Id': '600048696310', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-ck3be6qxgzguk0ud', 'PrincipalId': 'c58b5715-079c-4ae2-abe3-9224cf946882', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '67869b12-8e7e-433d-930c-43b288a0b8b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ck3be6qxgzguk0ud'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '67869b12-8e7e-433d-930c-43b288a0b8b6', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-ck3be6qxgzguk0ud'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '077324020170', 'workload_1_prod': '253373326873', 'workload_1_test': '9165..._1_test'}, {'Id': '542743988000', 'Name': 'workload_2_test'}, {'Id': '727768297440', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uhraztdxujflkjxd', 'PrincipalId': '697dee4a-51bb-407e-9955-64a2fbb26cbe', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '439cf950-637f-4cbf-81c3-a02c0ad1700a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uhraztdxujflkjxd'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '697dee4a-51bb-407e-9955-64a2fbb26cbe', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uhraztdxujflkjxd'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '697dee4a-51bb-407e-9955-64a2fbb26cbe', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uhraztdxujflkjxd'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '434891340474', 'workload_1_prod': '756467270578', 'workload_1_test': '5787..._1_test'}, {'Id': '273188229939', 'Name': 'workload_2_test'}, {'Id': '144159519999', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-q142njwwopzl33q0', 'PrincipalId': '5e95c21f-e960-4b7a-ac19-06b3fe118c7f', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e95c21f-e960-4b7a-ac19-06b3fe118c7f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-q142njwwopzl33q0'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e95c21f-e960-4b7a-ac19-06b3fe118c7f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-q142njwwopzl33q0'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '5e95c21f-e960-4b7a-ac19-06b3fe118c7f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-q142njwwopzl33q0'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '074117255054', 'workload_1_prod': '260922130684', 'workload_1_test': '0483..._1_test'}, {'Id': '618968509841', 'Name': 'workload_2_test'}, {'Id': '261505742609', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-wcspkjjuadrhq8fp', 'PrincipalId': '0c0d34d2-a87a-48ef-8455-efc818337451', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 2bf6df84-b9ca-4910-be55-bfe92c62d5b6
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, 2bf6df84-b9ca-4910-be55-bfe92c62d5b6
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '739203753487', 'workload_1_prod': '286031268158', 'workload_1_test': '4469..._1_test'}, {'Id': '405847382983', 'Name': 'workload_2_test'}, {'Id': '238652206074', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-46wugnw2ype2jumq', 'PrincipalId': 'cc507cb4-54cf-4222-bfe8-faa1e9cdede8', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'cc507cb4-54cf-4222-bfe8-faa1e9cdede8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-46wugnw2ype2jumq'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'cc507cb4-54cf-4222-bfe8-faa1e9cdede8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-46wugnw2ype2jumq'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'cc507cb4-54cf-4222-bfe8-faa1e9cdede8', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-46wugnw2ype2jumq'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '470009493178', 'workload_1_prod': '439454529993', 'workload_1_test': '1648..._1_test'}, {'Id': '592670019143', 'Name': 'workload_2_test'}, {'Id': '800469031619', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-u9kywc9siwyp5ow1', 'PrincipalId': 'fc484dad-830d-42d7-a57a-c30080782836', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_2
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '5125b8ac-c119-4973-94de-438aaff9d863', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-u9kywc9siwyp5ow1'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_4
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'fc484dad-830d-42d7-a57a-c30080782836', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-u9kywc9siwyp5ow1'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_ou_5
2025-03-09 22:13:39 ERROR Target type: OU
2025-03-09 22:13:39 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'fc484dad-830d-42d7-a57a-c30080782836', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-u9kywc9siwyp5ow1'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '826390835911', 'workload_1_prod': '958722388859', 'workload_1_suspended': ..._1_test'}, {'Id': '888335694819', 'Name': 'workload_2_test'}, {'Id': '522743916954', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-cwdi7vbuipdt0mwg', 'PrincipalId': '0365ba14-cb15-4a12-a65c-ba3aa8fcc868', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '035432419106', 'workload_1_prod': '664784362299', 'workload_1_test': '1423..._1_test'}, {'Id': '665885801396', 'Name': 'workload_2_test'}, {'Id': '755827297024', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-8ufiaitwda97nqwa', 'PrincipalId': '0fd9dc4f-a822-47c5-9a07-eb1706027a3c', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, ae9e096b-eb44-4e44-b15f-0b83b2c68c38
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO CONTINUING
2025-03-09 22:13:39 INFO Principal name: user1@testing.com, ae9e096b-eb44-4e44-b15f-0b83b2c68c38
2025-03-09 22:13:39 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.6
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '401577862062', 'workload_1_prod': '503686703066', 'workload_1_test': '0552..._1_test'}, {'Id': '356063188969', 'Name': 'workload_2_test'}, {'Id': '724296916667', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 6 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-eqq7skjgcsuldt8g', 'PrincipalId': '43c7b19d-356e-4e50-8683-b37913935963', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (48 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:39 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:39 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:39 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_1
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4aec6376-ca8e-44bc-b382-8a144427c440', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-eqq7skjgcsuldt8g'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_2
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4aec6376-ca8e-44bc-b382-8a144427c440', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-eqq7skjgcsuldt8g'}
2025-03-09 22:13:39 ERROR NOT VALID TARGET
2025-03-09 22:13:39 ERROR Target name: invalid_account_3
2025-03-09 22:13:39 ERROR Target type: ACCOUNT
2025-03-09 22:13:39 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '4aec6376-ca8e-44bc-b382-8a144427c440', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-eqq7skjgcsuldt8g'}
2025-03-09 22:13:39 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '346703419563', 'workload_1_prod': '291264251208', 'workload_1_test': '4933..., 'test': [{'Id': '493323754700', 'Name': 'workload_1_test'}, {'Id': '170219987916', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-1w4bbvtjqb1zlznl', 'PrincipalId': 'e1d0c19a-3df9-4809-a074-ab2326a500fa', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 63cbfa96-f07c-4846-88c7-c216317afa48
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 63cbfa96-f07c-4846-88c7-c216317afa48
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '164127208562', 'workload_1_prod': '996390065774', 'workload_1_test': '1216..., 'test': [{'Id': '121646055666', 'Name': 'workload_1_test'}, {'Id': '753218252978', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-eldcs3lgsah7sebn', 'PrincipalId': '77ea7d56-3db8-4c84-9df5-098377015568', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '868470422340', 'workload_1_prod': '300978822080', 'workload_1_suspended': ..., 'test': [{'Id': '204953950919', 'Name': 'workload_1_test'}, {'Id': '871772962033', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-owm3jlp6ofabdbq2', 'PrincipalId': 'ff22343a-b984-43d2-be1d-a641261b5028', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '009672792800', 'workload_1_prod': '790146419242', 'workload_1_test': '5162..., 'test': [{'Id': '516231993607', 'Name': 'workload_1_test'}, {'Id': '278593779576', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66', 'PrincipalId': 'ce0876b2-d8ac-4d5e-baec-bfdb0f2bae3d', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_1
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '23fe40b7-05d0-4e5d-93cc-c5fd56547a3a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '23fe40b7-05d0-4e5d-93cc-c5fd56547a3a', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_3
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'ce0876b2-d8ac-4d5e-baec-bfdb0f2bae3d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'ce0876b2-d8ac-4d5e-baec-bfdb0f2bae3d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'ce0876b2-d8ac-4d5e-baec-bfdb0f2bae3d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-jnbweo90g8ulsp66'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '583771420298', 'workload_1_prod': '358287993488', 'workload_1_test': '5062..., 'test': [{'Id': '506298851358', 'Name': 'workload_1_test'}, {'Id': '804229745686', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fvv1aumeqikibenr', 'PrincipalId': '3c32cc9a-6118-418f-b53f-9ab7c4abfd1e', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3c32cc9a-6118-418f-b53f-9ab7c4abfd1e', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fvv1aumeqikibenr'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3c32cc9a-6118-418f-b53f-9ab7c4abfd1e', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fvv1aumeqikibenr'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '3c32cc9a-6118-418f-b53f-9ab7c4abfd1e', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fvv1aumeqikibenr'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '844555958949', 'workload_1_prod': '485888338540', 'workload_1_test': '7587..., 'test': [{'Id': '758761120611', 'Name': 'workload_1_test'}, {'Id': '597215693042', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-tkcwidih7la84gpn', 'PrincipalId': 'a1a30bae-fa8b-4460-a3a3-089a86c5a272', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'a1a30bae-fa8b-4460-a3a3-089a86c5a272', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-tkcwidih7la84gpn'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': 'a1a30bae-fa8b-4460-a3a3-089a86c5a272', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-tkcwidih7la84gpn'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '013968931940', 'workload_1_prod': '755150071371', 'workload_1_test': '0033..., 'test': [{'Id': '003320618399', 'Name': 'workload_1_test'}, {'Id': '594712822294', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wvahnx7qe4dp2izb', 'PrincipalId': '959c51b8-5112-4df3-969f-becca992f5fd', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'e7d85113-c11d-4676-8326-6debb6eb4275', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wvahnx7qe4dp2izb'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '959c51b8-5112-4df3-969f-becca992f5fd', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wvahnx7qe4dp2izb'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '959c51b8-5112-4df3-969f-becca992f5fd', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-wvahnx7qe4dp2izb'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '445090527987', 'workload_1_prod': '448353263675', 'workload_1_test': '6907..., 'test': [{'Id': '690714945021', 'Name': 'workload_1_test'}, {'Id': '581267503966', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dthtygzsyy5cx6ad', 'PrincipalId': '67ad2b01-a4de-4978-9056-5eac9bbdc508', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '67ad2b01-a4de-4978-9056-5eac9bbdc508', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dthtygzsyy5cx6ad'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '67ad2b01-a4de-4978-9056-5eac9bbdc508', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dthtygzsyy5cx6ad'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '67ad2b01-a4de-4978-9056-5eac9bbdc508', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-dthtygzsyy5cx6ad'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '146605423045', 'workload_1_prod': '735272400620', 'workload_1_test': '3755..., 'test': [{'Id': '375554825790', 'Name': 'workload_1_test'}, {'Id': '361959341377', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-65homvzwruit0wck', 'PrincipalId': '812bc807-ea22-448a-9af4-afa7cc0027ba', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 33d964c9-ecfd-42f4-acf0-9b5e0bbbb9f0
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 33d964c9-ecfd-42f4-acf0-9b5e0bbbb9f0
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '393001006906', 'workload_1_prod': '060717408170', 'workload_1_test': '2438..., 'test': [{'Id': '243843822757', 'Name': 'workload_1_test'}, {'Id': '343371970491', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-d64xh4jeszfos7rj', 'PrincipalId': 'e77f0bff-55cc-44b7-9432-cd5b9b9ff33c', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e77f0bff-55cc-44b7-9432-cd5b9b9ff33c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-d64xh4jeszfos7rj'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e77f0bff-55cc-44b7-9432-cd5b9b9ff33c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-d64xh4jeszfos7rj'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'e77f0bff-55cc-44b7-9432-cd5b9b9ff33c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-d64xh4jeszfos7rj'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '024440545196', 'workload_1_prod': '619444847052', 'workload_1_test': '1363..., 'test': [{'Id': '136300254998', 'Name': 'workload_1_test'}, {'Id': '891749420006', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gzufr0rtqa6d1lay', 'PrincipalId': '5137248b-bfcc-4311-af59-d1e98e8a9d17', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'ad42e37e-3719-46c9-b826-9647c5bd9af3', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gzufr0rtqa6d1lay'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '5137248b-bfcc-4311-af59-d1e98e8a9d17', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gzufr0rtqa6d1lay'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '5137248b-bfcc-4311-af59-d1e98e8a9d17', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-gzufr0rtqa6d1lay'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '813580990380', 'workload_1_prod': '923433862871', 'workload_1_suspended': ..., 'test': [{'Id': '319998341372', 'Name': 'workload_1_test'}, {'Id': '819755548336', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-ruxz3yob6hrrdw1k', 'PrincipalId': '4c9bcd58-55e8-4527-ab23-9c00cea0fd5b', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '509839832949', 'workload_1_prod': '047796793557', 'workload_1_test': '8879..., 'test': [{'Id': '887992419371', 'Name': 'workload_1_test'}, {'Id': '147019475750', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-7soheifbbi7lkz66', 'PrincipalId': '7d637c8f-6fe4-4589-b2a8-18eece2dd8c9', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 21db875f-1dc4-469f-bb2f-615560a156e6
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 21db875f-1dc4-469f-bb2f-615560a156e6
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '932382352268', 'workload_1_prod': '577428411107', 'workload_1_test': '2695..., 'test': [{'Id': '269518012720', 'Name': 'workload_1_test'}, {'Id': '946715538222', 'Name': 'workload_2_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-8qq4nhvvqwra1ezy', 'PrincipalId': '66dbea49-2151-46f3-bf43-6eb6ebe8855e', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '2e8225fd-98c4-4120-9466-3352bc3a79d0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-8qq4nhvvqwra1ezy'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '2e8225fd-98c4-4120-9466-3352bc3a79d0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-8qq4nhvvqwra1ezy'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '2e8225fd-98c4-4120-9466-3352bc3a79d0', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-8qq4nhvvqwra1ezy'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '971646123058', 'workload_1_prod': '739294887810', 'workload_1_test': '3029..._1_test'}, {'Id': '659127194709', 'Name': 'workload_2_test'}, {'Id': '438555043987', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-umz3vep1cabhmscy', 'PrincipalId': '8300d517-b0ec-4205-beec-16923cd7424f', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, d0dbbb22-09a8-4a04-9b1a-da9a57168ec2
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, d0dbbb22-09a8-4a04-9b1a-da9a57168ec2
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '904976299706', 'workload_1_prod': '647422877521', 'workload_1_test': '8452..._1_test'}, {'Id': '178269096063', 'Name': 'workload_2_test'}, {'Id': '101384972812', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-srbt1afqmr9eypgk', 'PrincipalId': '118b0a84-7e01-4d94-baaf-6df2ba0f2d07', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '968868599998', 'workload_1_prod': '834676574253', 'workload_1_suspended': ..._1_test'}, {'Id': '692367922114', 'Name': 'workload_2_test'}, {'Id': '046173689767', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-drq6netzhafj5nj9', 'PrincipalId': '5c84712f-b026-4c58-b8de-d6d27683647e', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '776875152179', 'workload_1_prod': '216544555575', 'workload_1_test': '8984..._1_test'}, {'Id': '979343918474', 'Name': 'workload_2_test'}, {'Id': '476081878134', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2', 'PrincipalId': '0b3e0db5-ea23-4eed-a12e-94a768a426ff', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_1
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'c510a8cf-c125-4dd4-9455-e973ec551bcf', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_1', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': 'c510a8cf-c125-4dd4-9455-e973ec551bcf', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_3
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '0b3e0db5-ea23-4eed-a12e-94a768a426ff', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '0b3e0db5-ea23-4eed-a12e-94a768a426ff', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_3', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '0b3e0db5-ea23-4eed-a12e-94a768a426ff', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-qs5hufgycay7cci2'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '621636204395', 'workload_1_prod': '905295328025', 'workload_1_test': '1694..._1_test'}, {'Id': '534853204931', 'Name': 'workload_2_test'}, {'Id': '922681631587', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fehixdrrzhtzwvre', 'PrincipalId': '070bcfd9-0bef-4203-9bc6-133d955f2b54', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '070bcfd9-0bef-4203-9bc6-133d955f2b54', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fehixdrrzhtzwvre'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '070bcfd9-0bef-4203-9bc6-133d955f2b54', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fehixdrrzhtzwvre'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '070bcfd9-0bef-4203-9bc6-133d955f2b54', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-fehixdrrzhtzwvre'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '751999873472', 'workload_1_prod': '293422448994', 'workload_1_test': '2084..._1_test'}, {'Id': '244092457054', 'Name': 'workload_2_test'}, {'Id': '235848341774', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-supi0ven5duenpjp', 'PrincipalId': '2256f413-54d8-4249-9d1a-4784d49ab62d', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '2256f413-54d8-4249-9d1a-4784d49ab62d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-supi0ven5duenpjp'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '2256f413-54d8-4249-9d1a-4784d49ab62d', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-supi0ven5duenpjp'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '902374405417', 'workload_1_prod': '315299780499', 'workload_1_test': '0976..._1_test'}, {'Id': '348297490452', 'Name': 'workload_2_test'}, {'Id': '110365353204', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uoygm0yw6nwy4i1g', 'PrincipalId': '4b56f45d-39c1-4b90-88eb-581e9cf9fcc4', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '7a0704da-b266-4476-aa36-370a01a5c2fb', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uoygm0yw6nwy4i1g'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '4b56f45d-39c1-4b90-88eb-581e9cf9fcc4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uoygm0yw6nwy4i1g'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '4b56f45d-39c1-4b90-88eb-581e9cf9fcc4', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-uoygm0yw6nwy4i1g'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '886933266101', 'workload_1_prod': '810443117331', 'workload_1_test': '5098..._1_test'}, {'Id': '958415215242', 'Name': 'workload_2_test'}, {'Id': '153818419169', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y99bn17tzrrkacsu', 'PrincipalId': 'a97b30a9-df86-453f-8e9e-dca044ee3839', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a97b30a9-df86-453f-8e9e-dca044ee3839', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y99bn17tzrrkacsu'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a97b30a9-df86-453f-8e9e-dca044ee3839', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y99bn17tzrrkacsu'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': 'a97b30a9-df86-453f-8e9e-dca044ee3839', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-y99bn17tzrrkacsu'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '508522792887', 'workload_1_prod': '580663691464', 'workload_1_test': '4530..._1_test'}, {'Id': '780957171757', 'Name': 'workload_2_test'}, {'Id': '349971739705', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-v2c7k1dqbcr2zvm2', 'PrincipalId': '9b0ca84e-238e-4879-b24a-b9f5c1152eed', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, dab33c9e-8e0b-4215-9b20-ec38a155e40b
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, dab33c9e-8e0b-4215-9b20-ec38a155e40b
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '108355921884', 'workload_1_prod': '191965754962', 'workload_1_test': '7593..._1_test'}, {'Id': '886377539575', 'Name': 'workload_2_test'}, {'Id': '211299561540', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-3oi8yuylqsphtpjd', 'PrincipalId': '81a6e584-76b9-40fc-8e2a-1dd440ca8d04', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81a6e584-76b9-40fc-8e2a-1dd440ca8d04', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-3oi8yuylqsphtpjd'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81a6e584-76b9-40fc-8e2a-1dd440ca8d04', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-3oi8yuylqsphtpjd'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '81a6e584-76b9-40fc-8e2a-1dd440ca8d04', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-3oi8yuylqsphtpjd'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '866437706638', 'workload_1_prod': '644288247007', 'workload_1_test': '9150..._1_test'}, {'Id': '878173023555', 'Name': 'workload_2_test'}, {'Id': '556363952123', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 2 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4pggzkstru2obsbe', 'PrincipalId': '4449d5d4-0e9c-4de3-b10d-7f2eff80639f', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (16 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_2
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['dev', 'invalid_ou_2'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP', 'rule_number': 0, 'principal_id': '2ad6ac2d-0d20-4846-b261-248407904379', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4pggzkstru2obsbe'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_4
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '4449d5d4-0e9c-4de3-b10d-7f2eff80639f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4pggzkstru2obsbe'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_ou_5
2025-03-09 22:13:40 ERROR Target type: OU
2025-03-09 22:13:40 ERROR {'target_type': 'OU', 'target_names': ['test', 'invalid_ou_4', 'invalid_ou_5'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER', 'rule_number': 1, 'principal_id': '4449d5d4-0e9c-4de3-b10d-7f2eff80639f', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-4pggzkstru2obsbe'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '117160962468', 'workload_1_prod': '978252323626', 'workload_1_suspended': ..._1_test'}, {'Id': '114234142156', 'Name': 'workload_2_test'}, {'Id': '584837731914', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-32eoxzldtnd7ewld', 'PrincipalId': '2417e489-fd9f-4451-95fa-579ca9e89baf', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '183269402908', 'workload_1_prod': '535675471649', 'workload_1_test': '4362..._1_test'}, {'Id': '850032084197', 'Name': 'workload_2_test'}, {'Id': '940037538335', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr...'GROUP', ...}] == []
E         
E         Left contains one more item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-k...q4ofdawcp3h/ps-yjpjfpfjpulblhh4', 'PrincipalId': 'b7446c1b-02b7-4a37-819f-60fb242f70ce', 'PrincipalType': 'GROUP', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'invalid_permission_set_2', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 0ddfe7f4-4715-44f6-94d8-be4d1c81d89a
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_2, None
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'workload_2_test'], 'permission_set_name': 'invalid_permission_set_3', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO CONTINUING
2025-03-09 22:13:40 INFO Principal name: user1@testing.com, 0ddfe7f4-4715-44f6-94d8-be4d1c81d89a
2025-03-09 22:13:40 INFO Permission Set ARN: invalid_permission_set_3, None
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
_ test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml] _

sso_admin_client = <botocore.client.SSOAdmin object at 0xffffb556d6a0>
account_assignment_range = 0.8
setup_mock_aws_environment = {'account_name_id_map': {'workload_1_dev': '138143031970', 'workload_1_prod': '020024143870', 'workload_1_test': '5989..._1_test'}, {'Id': '342166834286', 'Name': 'workload_2_test'}, {'Id': '833597348669', 'Name': 'workload_3_test'}]}, ...}
manifest_filename = '/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml'

    @pytest.mark.parametrize(
        "account_assignment_range, setup_mock_aws_environment, manifest_filename",
        list(
            itertools.product(
                PRE_TEST_ACCOUNT_ASSIGNMENT_PERCENTAGES,
                AWS_ORG_DEFINITION_FILES,
                VALID_MANIFEST_DEFINITION_FILES,
            )
        ),
        indirect=["setup_mock_aws_environment"],
    )
    def test_create_account_assignments(
        sso_admin_client,
        account_assignment_range: float,
        setup_mock_aws_environment: pytest.fixture,
        manifest_filename: str,
    ) -> None:
        """
        Test the creation of account assignments based on the provided manifest file and setup environment.
    
        Args:
            sso_admin_client: Mock AWS SSO admin client.
            account_assignment_range (float): Percentage of assignments to pre-create.
            setup_mock_aws_environment (pytest.fixture): Fixture setting up the AWS test environment.
            manifest_filename (str): Filename of the manifest file to be loaded.
    
        Asserts:
            Verifies that the assignments created match the expected assignments.
        """
        sort_keys = operator.itemgetter("PermissionSetArn", "PrincipalType", "PrincipalId", "TargetId")
        manifest_file = load_file(manifest_filename)
        rbac_rules = manifest_file.get("rbac_rules", [])
    
        # Generate expected account assignments
        expected_account_assignments = generate_expected_account_assignments(
            manifest_file,
            setup_mock_aws_environment["ou_accounts_map"],
            setup_mock_aws_environment["identity_store_arn"],
            setup_mock_aws_environment["account_name_id_map"],
            setup_mock_aws_environment["sso_username_id_map"],
            setup_mock_aws_environment["sso_group_name_id_map"],
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        expected_account_assignments.sort(key=sort_keys)
    
        # Create expected account assignments
        upper_bound_range = int(len(expected_account_assignments) * account_assignment_range)
        existing_account_assignments = expected_account_assignments[0:upper_bound_range]
        for assignment in existing_account_assignments:
            sso_admin_client.create_account_assignment(**assignment)
    
        # Act
        identity_center_manager = SsoAdminManager(setup_mock_aws_environment["identity_store_arn"])
        setattr(
            identity_center_manager,
            "manifest_file_rbac_rules",
            rbac_rules
        )
        setattr(
            identity_center_manager,
            "sso_users",
            setup_mock_aws_environment["sso_username_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_groups",
            setup_mock_aws_environment["sso_group_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "sso_permission_sets",
            setup_mock_aws_environment["sso_permission_set_name_id_map"],
        )
        setattr(
            identity_center_manager,
            "ou_accounts_map",
            setup_mock_aws_environment["ou_accounts_map"],
        )
        setattr(
            identity_center_manager,
            "account_name_id_map",
            setup_mock_aws_environment["account_name_id_map"],
        )
        identity_center_manager.run_access_control_resolver()
    
        # Assert
>       assert expected_account_assignments[upper_bound_range:] == sorted(identity_center_manager.assignments_to_create, key=sort_keys)
E       AssertionError: assert [{'InstanceAr... 'USER', ...}] == []
E         
E         Left contains 3 more items, first extra item: {'InstanceArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h', 'PermissionSetArn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mldcicdkxl204rtv', 'PrincipalId': 'f948783b-a5ea-48c8-9ccd-13c43c9a904c', 'PrincipalType': 'USER', ...}
E         
E         Full diff:
E         - []
E         + [
E         +     {...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

tests/unit/test_access_control_resolver.py:124: AssertionError
------------------------------ Captured log call -------------------------------
2025-03-09 22:13:40 INFO Retrieving current SSO assignments on AWS
2025-03-09 22:13:40 INFO Generating RBAC AWS account SSO assignments to process
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test'], 'permission_set_name': 'Administrator', 'principal_name': 'group1', 'principal_type': 'GROUP'}
2025-03-09 22:13:40 INFO {'target_type': 'OU', 'target_names': ['dev', 'test', 'prod'], 'permission_set_name': 'Administrator', 'principal_name': 'user1@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 INFO {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_1
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7d564904-0fcb-48ea-9e2e-c74cf03a542c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mldcicdkxl204rtv'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_2
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7d564904-0fcb-48ea-9e2e-c74cf03a542c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mldcicdkxl204rtv'}
2025-03-09 22:13:40 ERROR NOT VALID TARGET
2025-03-09 22:13:40 ERROR Target name: invalid_account_3
2025-03-09 22:13:40 ERROR Target type: ACCOUNT
2025-03-09 22:13:40 ERROR {'target_type': 'ACCOUNT', 'target_names': ['workload_1_dev', 'workload_2_dev', 'invalid_account_1', 'invalid_account_2', 'invalid_account_3'], 'permission_set_name': 'Administrator', 'principal_name': 'user2@testing.com', 'principal_type': 'USER', 'rule_number': 2, 'principal_id': '7d564904-0fcb-48ea-9e2e-c74cf03a542c', 'permission_set_arn': 'arn:aws:sso:::instance/ssoins-kh5duq4ofdawcp3h/ps-mldcicdkxl204rtv'}
2025-03-09 22:13:40 INFO Generate invalid AWS account SSO assignments
=========================== short test summary info ============================
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.0-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.2-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.4-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.6-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_1.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_all_accounts.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_ous.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_valid_diff_2.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_permission_sets_diff_1.yaml]
FAILED tests/unit/test_access_control_resolver.py::test_create_account_assignments[0.8-aws_org_2.json-/app/tests/manifests/valid_schema/multiple_rules_invalid_some_accounts.yaml]
======================= 140 failed, 40 passed in 10.17s ========================
